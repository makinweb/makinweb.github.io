<!DOCTYPE html> <html class=no-js lang=en> <head> <meta charset=utf-8> <meta content='IE=edge' http-equiv=X-UA-Compatible> <title>Sass: @function</title> <meta content='Syntatically Awesome Style Sheets' name=description> <meta content='width=device-width, initial-scale=1' name=viewport> <link href='/feed.xml' rel=alternate type='application/atom+xml'> <link href="https://fonts.googleapis.com/css?family=Source+Code+Pro|Source+Sans+Pro:300,400,600|Source+Serif+Pro" rel=stylesheet /> <link href="https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.css" rel=stylesheet /> <link href="/assets/css/sass-6cc9628c.css" rel=stylesheet /> <noscript><link href="/assets/css/noscript-c6723936.css" rel=stylesheet /></noscript> <script>
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-535380-8']);
  _gaq.push(['_trackPageview']);
  
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script> <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  
  ga('create', 'UA-535380-14', 'sass-lang.com');
  ga('send', 'pageview');
</script> </head> <body class='documentation documentation_at-rules documentation_at-rules_function'> <!--[if lt IE 9]><p class=browserupgrade> You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience and security. </p><![endif]--> <header class=sl-r-banner itemscope=itemscope itemtype='http://schema.org/WPHeader' role=banner> <div class='sl-c-alert sl-c-alert--info'> <div class=sl-l-container> <p> Sass just launched a brand new module system. <a href="/blog/the-module-system-is-launched">Learn all about the module system on the Sass blog </a>! </p> </div> </div> <div class=sl-c-pop-stripe></div> <div class=sl-l-container> <div class='sl-l-grid sl-l-grid--full sl-l-large-grid--fit sl-l-large-grid--center sl-l-large-grid--gutters'> <p class='sl-l-grid__column sl-r-banner__brand'> <a href="/"><img alt=Sass height=48 src="/assets/img/logos/logo-b6e1ef6e.svg"/> </a></p> <nav aria-label='Site navigation' class='sl-r-banner__navigation sl-l-grid__column sl-l-large-grid sl-l-large-grid__column--auto-size sl-c-list-horizontal-wrapper' itemscope=itemscope itemtype='http://schema.org/SiteNavigationElement' role=navigation> <ul> <li><a href="/install">Install</a></li> <li><a href="/guide">Learn Sass</a></li> <li><a href="/blog">Blog</a></li> <li><a href="/documentation">Documentation</a></li> <li><a href="/community">Get Involved</a></li> <li><label class=visuallyhidden for=s>Search</label><input placeholder=Search class=search id=s name=s></li> </ul> </nav> </div> </div> </header> <main class=content id=main-content itemprop=mainContentOfPage role=main> <h1 class=sl-l-container> @function </h1> <div class='sl-background--white sl-l-container sl-l-section'><div class=sl-l-medium-holy-grail> <div class=sl-l-medium-holy-grail__body> <nav aria-label='Content navigation' class=sl-l-medium-holy-grail__navigation role=navigation> <div class='sl-c-list-navigation-wrapper sl-c-list-navigation-wrapper--collapsible'> <h2>Contents</h2> <ul><li><a href="/documentation/syntax" class=section>Syntax</a> <ul><li class=overview><a href="/documentation/syntax">Overview</a></li> <li><a href="/documentation/syntax/parsing" class="">Parsing a Stylesheet</a> </li> <li><a href="/documentation/syntax/structure" class="">Structure of a Stylesheet</a> </li> <li><a href="/documentation/syntax/comments" class="">Comments</a> </li> <li><a href="/documentation/syntax/special-functions" class="">Special Functions</a> </li> </ul> </li> <li><a href="/documentation/style-rules" class=section>Style Rules</a> <ul><li class=overview><a href="/documentation/style-rules">Overview</a></li> <li><a href="/documentation/style-rules/declarations" class="">Property Declarations</a> </li> <li><a href="/documentation/style-rules/parent-selector" class="">Parent Selector</a> </li> <li><a href="/documentation/style-rules/placeholder-selectors" class="">Placeholder Selectors</a> </li> </ul> </li> <li><a href="/documentation/variables" class="">Variables</a> </li> <li><a href="/documentation/interpolation" class="">Interpolation</a> </li> <li><a href="/documentation/at-rules" class="section open selected">At-Rules</a> <ul><li class=overview><a href="/documentation/at-rules">Overview</a></li> <li><a href="/documentation/at-rules/use" class=""><code>@use</code></a> </li> <li><a href="/documentation/at-rules/forward" class=""><code>@forward</code></a> </li> <li><a href="/documentation/at-rules/import" class=""><code>@import</code></a> </li> <li><a href="/documentation/at-rules/mixin" class=""><code>@mixin</code> and <code>@include</code></a> </li> <li><a href="/documentation/at-rules/function" class="open selected"><code>@function</code></a> </li> <li><a href="/documentation/at-rules/extend" class=""><code>@extend</code></a> </li> <li><a href="/documentation/at-rules/error" class=""><code>@error</code></a> </li> <li><a href="/documentation/at-rules/warn" class=""><code>@warn</code></a> </li> <li><a href="/documentation/at-rules/debug" class=""><code>@debug</code></a> </li> <li><a href="/documentation/at-rules/at-root" class=""><code>@at-root</code></a> </li> <li><a href="/documentation/at-rules/control" class=section>Flow Control</a> <ul><li class=overview><a href="/documentation/at-rules/control">Overview</a></li> <li><a href="/documentation/at-rules/control/if" class=""><code>@if</code> and <code>@else</code></a> </li> <li><a href="/documentation/at-rules/control/each" class=""><code>@each</code></a> </li> <li><a href="/documentation/at-rules/control/for" class=""><code>@for</code></a> </li> <li><a href="/documentation/at-rules/control/while" class=""><code>@while</code></a> </li> </ul> </li> <li><a href="/documentation/at-rules/css" class="">From CSS</a> </li> </ul> </li> <li><a href="/documentation/values" class=section>Values</a> <ul><li class=overview><a href="/documentation/values">Overview</a></li> <li><a href="/documentation/values/numbers" class="">Numbers</a> </li> <li><a href="/documentation/values/strings" class="">Strings</a> </li> <li><a href="/documentation/values/colors" class="">Colors</a> </li> <li><a href="/documentation/values/lists" class="">Lists</a> </li> <li><a href="/documentation/values/maps" class="">Maps</a> </li> <li><a href="/documentation/values/booleans" class=""><code>true</code> and <code>false</code></a> </li> <li><a href="/documentation/values/null" class=""><code>null</code></a> </li> <li><a href="/documentation/values/functions" class="">Functions</a> </li> </ul> </li> <li><a href="/documentation/operators" class=section>Operators</a> <ul><li class=overview><a href="/documentation/operators">Overview</a></li> <li><a href="/documentation/operators/equality" class="">Equality</a> </li> <li><a href="/documentation/operators/relational" class="">Relational</a> </li> <li><a href="/documentation/operators/numeric" class="">Numeric</a> </li> <li><a href="/documentation/operators/string" class="">String</a> </li> <li><a href="/documentation/operators/boolean" class="">Boolean</a> </li> </ul> </li> <li><a href="/documentation/modules" class=section>Built-In Modules</a> <ul><li class=overview><a href="/documentation/modules">Overview</a></li> <li><a href="/documentation/modules/color" class=""><code>sass:color</code></a> </li> <li><a href="/documentation/modules/list" class=""><code>sass:list</code></a> </li> <li><a href="/documentation/modules/map" class=""><code>sass:map</code></a> </li> <li><a href="/documentation/modules/math" class=""><code>sass:math</code></a> </li> <li><a href="/documentation/modules/meta" class=""><code>sass:meta</code></a> </li> <li><a href="/documentation/modules/selector" class=""><code>sass:selector</code></a> </li> <li><a href="/documentation/modules/string" class=""><code>sass:string</code></a> </li> </ul> </li> <li><a href="/documentation/breaking-changes" class=section>Breaking Changes</a> <ul><li class=overview><a href="/documentation/breaking-changes">Overview</a></li> <li><a href="/documentation/breaking-changes/extend-compound" class="">Extending Compound Selectors</a> </li> <li><a href="/documentation/breaking-changes/css-vars" class="">CSS Variable Syntax</a> </li> </ul> </li> <li><a href="/documentation/cli" class=section>Command Line</a> <ul><li class=overview><a href="/documentation/cli">Overview</a></li> <li><a href="/documentation/cli/dart-sass" class="">Dart Sass</a> </li> <li><a href="/documentation/cli/ruby-sass" class="">Ruby Sass</a> </li> <li><a href="/documentation/cli/migrator" class="">Migrator</a> </li> </ul> </li> <li><a href="/documentation/js-api" class="">JavaScript API</a> </li> </ul> </div> </nav> <div class=sl-l-medium-holy-grail__main> <div class=sl-l-large-holy-grail> <div class=sl-l-large-holy-grail__body> <div class='sl-l-large-holy-grail__complementary sl-l-large-holy-grail__complementary--contents'> <nav aria-labelledby=page-sections class='page-sections sl-c-list-navigation-wrapper sl-c-list-navigation-wrapper--collapsible'> <h3 id=page-sections>Page Sections</h3> <ul> <li> <a href="#arguments" class="section open">Arguments</a> <ul> <li class=overview><a href="#arguments">Overview</a></li> <li> <a href="#optional-arguments">Optional Arguments</a> </li> <li> <a href="#keyword-arguments">Keyword Arguments</a> </li> <li> <a href="#taking-arbitrary-arguments" class=section>Taking Arbitrary Arguments</a> <ul> <li class=overview><a href="#taking-arbitrary-arguments">Overview</a></li> <li> <a href="#taking-arbitrary-keyword-arguments">Taking Arbitrary Keyword Arguments</a> </li> <li> <a href="#passing-arbitrary-arguments">Passing Arbitrary Arguments</a> </li> </ul> </li> </ul> </li> <li> <a href="#return"><code>@return</code></a> </li> <li> <a href="#other-functions" class="section open">Other Functions</a> <ul> <li class=overview><a href="#other-functions">Overview</a></li> <li> <a href="#plain-css-functions">Plain CSS Functions</a> </li> </ul> </li> </ul> </nav> </div> <div class='sl-l-large-holy-grail__main docSearch-content'> <div class='sl-l-container sl-l-container--small'> <div class=sl-c-introduction> <p>Functions allow you to define complex operations on <a href="../values">SassScript values</a> that you can re-use throughout your stylesheet. They make it easy to abstract out common formulas and behaviors in a readable way.</p> </div> <p>Functions are defined using the <code>@function</code> at-rule, which is&nbsp;written <code>@function &lt;name&gt;(&lt;arguments...&gt;) { ... }</code>. A function&rsquo;s name can be any&nbsp;Sass identifier. It can only contain <a href="../syntax/structure#universal-statements">universal statements</a>, as well as&nbsp;the <a href="#return"><code>@return</code> at-rule</a> which indicates the value to use as the result of&nbsp;the function call. Functions are called using the normal <span class=caps>CSS</span> function&nbsp;syntax.</p> <div class="code-example ui-tabs can-split" style="--split-location: 50.0%"><ul class="ui-tabs-nav ui-helper-reset ui-helper-clearfix"><li class="ui-tabs-tab ui-tabs-active"><a href="#example-1-scss" class=ui-tabs-anchor><span class=caps>SCSS</span></a></li><li class=ui-tabs-tab><a href="#example-1-sass" class=ui-tabs-anchor>Sass</a></li><li class="ui-tabs-tab css-tab"><a href="#example-1-css" class=ui-tabs-anchor><span class=caps>CSS</span></a></li></ul><div id=example-1-scss class="ui-tabs-panel scss"><h3 class=visuallyhidden><span class=caps>SCSS</span>&nbsp;Syntax</h3><pre class="highlight scss"><code><span class="k">@function</span> <span class="nf">pow</span><span class="p">(</span><span class="nv">$base</span><span class="o">,</span> <span class="nv">$exponent</span><span class="p">)</span> <span class="p">{</span>&#x000A;  <span class="nv">$result</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span>&#x000A;  <span class="k">@for</span> <span class="nv">$_</span> <span class="ow">from</span> <span class="m">1</span> <span class="ow">through</span> <span class="nv">$exponent</span> <span class="p">{</span>&#x000A;    <span class="nv">$result</span><span class="p">:</span> <span class="nv">$result</span> <span class="o">*</span> <span class="nv">$base</span><span class="p">;</span>&#x000A;  <span class="p">}</span>&#x000A;  <span class="k">@return</span> <span class="nv">$result</span><span class="p">;</span>&#x000A;<span class="p">}</span>&#x000A;&#x000A;<span class="nc">.sidebar</span> <span class="p">{</span>&#x000A;  <span class="nl">float</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>&#x000A;  <span class="nl">margin-left</span><span class="p">:</span> <span class="nf">pow</span><span class="p">(</span><span class="m">4</span><span class="o">,</span> <span class="m">3</span><span class="p">)</span> <span class="o">*</span> <span class="m">1px</span><span class="p">;</span>&#x000A;<span class="p">}</span>&#x000A;</code></pre></div><div id=example-1-sass class="ui-tabs-panel sass ui-tabs-panel-inactive"><h3 class=visuallyhidden>Sass&nbsp;Syntax</h3><pre class="highlight sass"><code><span class="k">@function</span> <span class="nf">pow</span><span class="p">(</span><span class="nv">$base</span><span class="o">,</span> <span class="nv">$exponent</span><span class="p">)</span>&#x000A;  <span class="nv">$result</span><span class="p">:</span> <span class="m">1</span>&#x000A;  <span class="k">@for</span> <span class="nv">$_</span> <span class="ow">from</span> <span class="m">1</span> <span class="ow">through</span> <span class="nv">$exponent</span>&#x000A;    <span class="nv">$result</span><span class="p">:</span> <span class="nv">$result</span> <span class="o">*</span> <span class="nv">$base</span>&#x000A;&#x000A;  <span class="k">@return</span> <span class="nv">$result</span>&#x000A;&#x000A;&#x000A;<span class="nc">.sidebar</span>&#x000A;  <span class="nl">float</span><span class="p">:</span> <span class="nb">left</span>&#x000A;  <span class="nl">margin-left</span><span class="p">:</span> <span class="nf">pow</span><span class="p">(</span><span class="m">4</span><span class="o">,</span> <span class="m">3</span><span class="p">)</span> <span class="o">*</span> <span class="m">1px</span>&#x000A;&#x000A;</code></pre></div><div id=example-1-css class="ui-tabs-panel css ui-tabs-panel-inactive"><h3 class=visuallyhidden><span class=caps>CSS</span>&nbsp;Output</h3><pre class="highlight css"><code><span class="nc">.sidebar</span> <span class="p">{</span>&#x000A;  <span class="nl">float</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>&#x000A;  <span class="nl">margin-left</span><span class="p">:</span> <span class="m">64px</span><span class="p">;</span>&#x000A;<span class="p">}</span>&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;</code></pre></div></div> <div class="sl-c-callout sl-c-callout--fun-fact"><h3>💡 Fun&nbsp;fact:</h3> <p>Function names, like all Sass identifiers, treat hyphens and underscores as identical. This means that <code>scale-color</code> and <code>scale_color</code> both refer to the same function. This is a historical holdover from the very early days of Sass, when it <em>only</em> allowed underscores in identifier names. Once Sass added support for hyphens to match <span class=caps>CSS</span>&rsquo;s syntax, the two were made equivalent to make migration&nbsp;easier.</p> </div> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>While it&rsquo;s technically possible for functions to have side-effects like setting <a href="../variables#scope">global variables</a>, this is strongly discouraged. Use <a href=mixin>mixins</a> for side-effects, and use functions just to compute&nbsp;values.</p> </div> <h2 id=arguments> <a class=anchor href="#arguments"><span class=visuallyhidden>Arguments permalink</span></a>Arguments</h2> <p>Arguments allow functions&rsquo; behavior to be customized each time they&rsquo;re&nbsp;called. The arguments are specified in the <code>@function</code> rule after the function&rsquo;s&nbsp;name, as a list of variable names surrounded by parentheses. The function must&nbsp;be called with the same number of arguments in the form of <a href="../syntax/structure#expressions">SassScript expressions</a>. The values of these expression are available within&nbsp;the function&rsquo;s body as the corresponding&nbsp;variables.</p> <div class="sl-c-callout sl-c-callout--fun-fact"><h3>💡 Fun&nbsp;fact:</h3> <p>Argument lists can also have trailing commas! This can makes it easier to avoid syntax errors when refactoring your&nbsp;stylesheets.</p> </div> <h3 id=optional-arguments> <a class=anchor href="#optional-arguments"><span class=visuallyhidden>Optional Arguments permalink</span></a>Optional&nbsp;Arguments</h3> <p>Normally, every argument a function declares must be passed when that&nbsp;function is included. However, you can make an argument optional by defining a <em>default value</em> which will be used if that arguments isn&rsquo;t passed. Default values use&nbsp;the same syntax as <a href="../variables">variable declarations</a>: the variable name, followed by a&nbsp;colon and a <a href="../syntax/structure#expressions">SassScript expression</a>. This makes it easy to define flexible&nbsp;function APIs that can be used in simple or complex&nbsp;ways.</p> <div class="code-example ui-tabs can-split" style="--split-location: 63.63636363636363%"><ul class="ui-tabs-nav ui-helper-reset ui-helper-clearfix"><li class="ui-tabs-tab ui-tabs-active"><a href="#example-2-scss" class=ui-tabs-anchor><span class=caps>SCSS</span></a></li><li class=ui-tabs-tab><a href="#example-2-sass" class=ui-tabs-anchor>Sass</a></li><li class="ui-tabs-tab css-tab"><a href="#example-2-css" class=ui-tabs-anchor><span class=caps>CSS</span></a></li></ul><div id=example-2-scss class="ui-tabs-panel scss"><h3 class=visuallyhidden><span class=caps>SCSS</span>&nbsp;Syntax</h3><pre class="highlight scss"><code><span class="k">@function</span> <span class="nf">invert</span><span class="p">(</span><span class="nv">$color</span><span class="o">,</span> <span class="nv">$amount</span><span class="o">:</span> <span class="m">100%</span><span class="p">)</span> <span class="p">{</span>&#x000A;  <span class="nv">$inverse</span><span class="p">:</span> <span class="nf">change-color</span><span class="p">(</span><span class="nv">$color</span><span class="o">,</span> <span class="nv">$hue</span><span class="o">:</span> <span class="nf">hue</span><span class="p">(</span><span class="nv">$color</span><span class="p">)</span> <span class="o">+</span> <span class="m">180</span><span class="p">);</span>&#x000A;  <span class="k">@return</span> <span class="nf">mix</span><span class="p">(</span><span class="nv">$inverse</span><span class="o">,</span> <span class="nv">$color</span><span class="o">,</span> <span class="nv">$amount</span><span class="p">);</span>&#x000A;<span class="p">}</span>&#x000A;&#x000A;<span class="nv">$primary-color</span><span class="p">:</span> <span class="mh">#036</span><span class="p">;</span>&#x000A;<span class="nc">.header</span> <span class="p">{</span>&#x000A;  <span class="nl">background-color</span><span class="p">:</span> <span class="nf">invert</span><span class="p">(</span><span class="nv">$primary-color</span><span class="o">,</span> <span class="m">80%</span><span class="p">);</span>&#x000A;<span class="p">}</span>&#x000A;</code></pre></div><div id=example-2-sass class="ui-tabs-panel sass ui-tabs-panel-inactive"><h3 class=visuallyhidden>Sass&nbsp;Syntax</h3><pre class="highlight sass"><code><span class="k">@function</span> <span class="nf">invert</span><span class="p">(</span><span class="nv">$color</span><span class="o">,</span> <span class="nv">$amount</span><span class="o">:</span> <span class="m">100%</span><span class="p">)</span>&#x000A;  <span class="nv">$inverse</span><span class="p">:</span> <span class="nf">change-color</span><span class="p">(</span><span class="nv">$color</span><span class="o">,</span> <span class="nv">$hue</span><span class="o">:</span> <span class="nf">hue</span><span class="p">(</span><span class="nv">$color</span><span class="p">)</span> <span class="o">+</span> <span class="m">180</span><span class="p">)</span>&#x000A;  <span class="k">@return</span> <span class="nf">mix</span><span class="p">(</span><span class="nv">$inverse</span><span class="o">,</span> <span class="nv">$color</span><span class="o">,</span> <span class="nv">$amount</span><span class="p">)</span>&#x000A;&#x000A;&#x000A;<span class="nv">$primary-color</span><span class="p">:</span> <span class="mh">#036</span>&#x000A;<span class="nc">.header</span>&#x000A;  <span class="nl">background-color</span><span class="p">:</span> <span class="nf">invert</span><span class="p">(</span><span class="nv">$primary-color</span><span class="o">,</span> <span class="m">80%</span><span class="p">)</span>&#x000A;&#x000A;</code></pre></div><div id=example-2-css class="ui-tabs-panel css ui-tabs-panel-inactive"><h3 class=visuallyhidden><span class=caps>CSS</span>&nbsp;Output</h3><pre class="highlight css"><code><span class="nc">.header</span> <span class="p">{</span>&#x000A;  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#523314</span><span class="p">;</span>&#x000A;<span class="p">}</span>&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;</code></pre></div></div> <div class="sl-c-callout sl-c-callout--fun-fact"><h3>💡 Fun&nbsp;fact:</h3> <p>Default values can be any SassScript expression, and they can even refer to earlier&nbsp;arguments!</p> </div> <h3 id=keyword-arguments> <a class=anchor href="#keyword-arguments"><span class=visuallyhidden>Keyword Arguments permalink</span></a>Keyword&nbsp;Arguments</h3> <p>When a function is called, arguments can be passed by name in addition&nbsp;to passing them by their position in the argument list. This is especially&nbsp;useful for functions with multiple optional arguments, or with <a href="../values/booleans">boolean</a>&nbsp;arguments whose meanings aren&rsquo;t obvious without a name to go with them. Keyword&nbsp;arguments use the same syntax as <a href="../variables">variable declarations</a> and <a href="#optional-arguments">optional arguments</a>.</p> <div class="code-example ui-tabs can-split" style="--split-location: 63.63636363636363%"><ul class="ui-tabs-nav ui-helper-reset ui-helper-clearfix"><li class="ui-tabs-tab ui-tabs-active"><a href="#example-3-scss" class=ui-tabs-anchor><span class=caps>SCSS</span></a></li><li class=ui-tabs-tab><a href="#example-3-sass" class=ui-tabs-anchor>Sass</a></li><li class="ui-tabs-tab css-tab"><a href="#example-3-css" class=ui-tabs-anchor><span class=caps>CSS</span></a></li></ul><div id=example-3-scss class="ui-tabs-panel scss"><h3 class=visuallyhidden><span class=caps>SCSS</span>&nbsp;Syntax</h3><pre class="highlight scss"><code><span class="nv">$primary-color</span><span class="p">:</span> <span class="mh">#036</span><span class="p">;</span>&#x000A;<span class="nc">.banner</span> <span class="p">{</span>&#x000A;  <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$primary-color</span><span class="p">;</span>&#x000A;  <span class="nl">color</span><span class="p">:</span> <span class="nf">scale-color</span><span class="p">(</span><span class="nv">$primary-color</span><span class="o">,</span> <span class="nv">$lightness</span><span class="o">:</span> <span class="o">+</span><span class="m">40%</span><span class="p">);</span>&#x000A;<span class="p">}</span>&#x000A;</code></pre></div><div id=example-3-sass class="ui-tabs-panel sass ui-tabs-panel-inactive"><h3 class=visuallyhidden>Sass&nbsp;Syntax</h3><pre class="highlight sass"><code><span class="nv">$primary-color</span><span class="p">:</span> <span class="mh">#036</span>&#x000A;<span class="nc">.banner</span>&#x000A;  <span class="nl">background-color</span><span class="p">:</span> <span class="nv">$primary-color</span>&#x000A;  <span class="nl">color</span><span class="p">:</span> <span class="nf">scale-color</span><span class="p">(</span><span class="nv">$primary-color</span><span class="o">,</span> <span class="nv">$lightness</span><span class="o">:</span> <span class="o">+</span><span class="m">40%</span><span class="p">)</span>&#x000A;&#x000A;</code></pre></div><div id=example-3-css class="ui-tabs-panel css ui-tabs-panel-inactive"><h3 class=visuallyhidden><span class=caps>CSS</span>&nbsp;Output</h3><pre class="highlight css"><code><span class="nc">.banner</span> <span class="p">{</span>&#x000A;  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#036</span><span class="p">;</span>&#x000A;  <span class="nl">color</span><span class="p">:</span> <span class="m">#0a85ff</span><span class="p">;</span>&#x000A;<span class="p">}</span>&#x000A;&#x000A;</code></pre></div></div> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>Because <em>any</em> argument can be passed by name, be careful when renaming a function&rsquo;s arguments&hellip; it might break your users! It can be helpful to keep the old name around as an <a href="#optional-arguments">optional argument</a> for a while and printing a <a href=warn>warning</a> if anyone passes it, so they know to migrate to the new&nbsp;argument.</p> </div> <h3 id=taking-arbitrary-arguments> <a class=anchor href="#taking-arbitrary-arguments"><span class=visuallyhidden>Taking Arbitrary Arguments permalink</span></a>Taking Arbitrary&nbsp;Arguments</h3> <p>Sometimes it&rsquo;s useful for a function to be able to take any number of&nbsp;arguments. If the last argument in a <code>@function</code> declaration ends in <code>...</code>, then all&nbsp;extra arguments to that function are passed to that argument as a <a href="../values/lists">list</a>.&nbsp;This argument is known as an <a href="../values/lists#argument-lists">argument list</a>.</p> <div class="code-example ui-tabs can-split" style="--split-location: 50.0%"><ul class="ui-tabs-nav ui-helper-reset ui-helper-clearfix"><li class="ui-tabs-tab ui-tabs-active"><a href="#example-4-scss" class=ui-tabs-anchor><span class=caps>SCSS</span></a></li><li class=ui-tabs-tab><a href="#example-4-sass" class=ui-tabs-anchor>Sass</a></li><li class="ui-tabs-tab css-tab"><a href="#example-4-css" class=ui-tabs-anchor><span class=caps>CSS</span></a></li></ul><div id=example-4-scss class="ui-tabs-panel scss"><h3 class=visuallyhidden><span class=caps>SCSS</span>&nbsp;Syntax</h3><pre class="highlight scss"><code><span class="k">@function</span> <span class="nf">sum</span><span class="p">(</span><span class="nv">$numbers</span><span class="o">...</span><span class="p">)</span> <span class="p">{</span>&#x000A;  <span class="nv">$sum</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>&#x000A;  <span class="k">@each</span> <span class="nv">$number</span> <span class="n">in</span> <span class="nv">$numbers</span> <span class="p">{</span>&#x000A;    <span class="nv">$sum</span><span class="p">:</span> <span class="nv">$sum</span> <span class="o">+</span> <span class="nv">$number</span><span class="p">;</span>&#x000A;  <span class="p">}</span>&#x000A;  <span class="k">@return</span> <span class="nv">$sum</span><span class="p">;</span>&#x000A;<span class="p">}</span>&#x000A;&#x000A;<span class="nc">.micro</span> <span class="p">{</span>&#x000A;  <span class="nl">width</span><span class="p">:</span> <span class="nf">sum</span><span class="p">(</span><span class="m">50px</span><span class="o">,</span> <span class="m">30px</span><span class="o">,</span> <span class="m">100px</span><span class="p">);</span>&#x000A;<span class="p">}</span>&#x000A;</code></pre></div><div id=example-4-sass class="ui-tabs-panel sass ui-tabs-panel-inactive"><h3 class=visuallyhidden>Sass&nbsp;Syntax</h3><pre class="highlight sass"><code><span class="k">@function</span> <span class="nf">sum</span><span class="p">(</span><span class="nv">$numbers</span><span class="o">...</span><span class="p">)</span>&#x000A;  <span class="nv">$sum</span><span class="p">:</span> <span class="m">0</span>&#x000A;  <span class="k">@each</span> <span class="nv">$number</span> <span class="n">in</span> <span class="nv">$numbers</span>&#x000A;    <span class="nv">$sum</span><span class="p">:</span> <span class="nv">$sum</span> <span class="o">+</span> <span class="nv">$number</span>&#x000A;&#x000A;  <span class="k">@return</span> <span class="nv">$sum</span>&#x000A;&#x000A;&#x000A;<span class="nc">.micro</span>&#x000A;  <span class="nl">width</span><span class="p">:</span> <span class="nf">sum</span><span class="p">(</span><span class="m">50px</span><span class="o">,</span> <span class="m">30px</span><span class="o">,</span> <span class="m">100px</span><span class="p">)</span>&#x000A;&#x000A;</code></pre></div><div id=example-4-css class="ui-tabs-panel css ui-tabs-panel-inactive"><h3 class=visuallyhidden><span class=caps>CSS</span>&nbsp;Output</h3><pre class="highlight css"><code><span class="nc">.micro</span> <span class="p">{</span>&#x000A;  <span class="nl">width</span><span class="p">:</span> <span class="m">180px</span><span class="p">;</span>&#x000A;<span class="p">}</span>&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;&#x000A;</code></pre></div></div> <h4 id=taking-arbitrary-keyword-arguments> <a class=anchor href="#taking-arbitrary-keyword-arguments"><span class=visuallyhidden>Taking Arbitrary Keyword Arguments permalink</span></a>Taking Arbitrary Keyword&nbsp;Arguments</h4> <p>Argument lists can also be used to take arbitrary keyword arguments.&nbsp;The <a href="../modules/meta#keywords"><code>meta.keywords()</code> function</a> takes an argument list and returns any&nbsp;extra keywords that were passed to the function as a <a href="../values/maps">map</a> from argument names&nbsp;(not including <code>$</code>) to those arguments&rsquo;&nbsp;values.</p> <div class="sl-c-callout sl-c-callout--fun-fact"><h3>💡 Fun&nbsp;fact:</h3> <p>If you don&rsquo;t ever pass an argument list to the <a href="../modules/meta#keywords"><code>meta.keywords()</code> function</a>, that argument list won&rsquo;t allow extra keyword arguments. This helps callers of your function make sure they haven&rsquo;t accidentally misspelled any argument&nbsp;names.</p> </div> <h4 id=passing-arbitrary-arguments> <a class=anchor href="#passing-arbitrary-arguments"><span class=visuallyhidden>Passing Arbitrary Arguments permalink</span></a>Passing Arbitrary&nbsp;Arguments</h4> <p>Just like argument lists allow functions to take arbitrary positional or&nbsp;keyword arguments, the same syntax can be used to <em>pass</em> positional and&nbsp;keyword arguments to a function. If you pass a list followed by <code>...</code> as the&nbsp;last argument of a function call, its elements will be treated as&nbsp;additional positional arguments. Similarly, a map followed by <code>...</code> will be treated&nbsp;as additional keyword arguments. You can even pass both at&nbsp;once!</p> <div class="code-example ui-tabs can-split" style="--split-location: 50.0%"><ul class="ui-tabs-nav ui-helper-reset ui-helper-clearfix"><li class="ui-tabs-tab ui-tabs-active"><a href="#example-5-scss" class=ui-tabs-anchor><span class=caps>SCSS</span></a></li><li class=ui-tabs-tab><a href="#example-5-sass" class=ui-tabs-anchor>Sass</a></li><li class="ui-tabs-tab css-tab"><a href="#example-5-css" class=ui-tabs-anchor><span class=caps>CSS</span></a></li></ul><div id=example-5-scss class="ui-tabs-panel scss"><h3 class=visuallyhidden><span class=caps>SCSS</span>&nbsp;Syntax</h3><pre class="highlight scss"><code><span class="nv">$widths</span><span class="p">:</span> <span class="m">50px</span><span class="o">,</span> <span class="m">30px</span><span class="o">,</span> <span class="m">100px</span><span class="p">;</span>&#x000A;<span class="nc">.micro</span> <span class="p">{</span>&#x000A;  <span class="nl">width</span><span class="p">:</span> <span class="nf">min</span><span class="p">(</span><span class="nv">$widths</span><span class="o">...</span><span class="p">);</span>&#x000A;<span class="p">}</span>&#x000A;</code></pre></div><div id=example-5-sass class="ui-tabs-panel sass ui-tabs-panel-inactive"><h3 class=visuallyhidden>Sass&nbsp;Syntax</h3><pre class="highlight sass"><code><span class="nv">$widths</span><span class="p">:</span> <span class="m">50px</span><span class="o">,</span> <span class="m">30px</span><span class="o">,</span> <span class="m">100px</span>&#x000A;<span class="nc">.micro</span>&#x000A;  <span class="nl">width</span><span class="p">:</span> <span class="nf">min</span><span class="p">(</span><span class="nv">$widths</span><span class="o">...</span><span class="p">)</span>&#x000A;&#x000A;</code></pre></div><div id=example-5-css class="ui-tabs-panel css ui-tabs-panel-inactive"><h3 class=visuallyhidden><span class=caps>CSS</span>&nbsp;Output</h3><pre class="highlight css"><code><span class="nc">.micro</span> <span class="p">{</span>&#x000A;  <span class="nl">width</span><span class="p">:</span> <span class="m">30px</span><span class="p">;</span>&#x000A;<span class="p">}</span>&#x000A;&#x000A;</code></pre></div></div> <div class="sl-c-callout sl-c-callout--fun-fact"><h3>💡 Fun&nbsp;fact:</h3> <p>Because an <a href="../values/lists#argument-lists">argument list</a> keeps track of both positional and keyword arguments, you use it to pass both at once to another function. That makes it super easy to define an alias for a&nbsp;function!</p> <div class="code-example ui-tabs "><ul class="ui-tabs-nav ui-helper-reset ui-helper-clearfix"><li class="ui-tabs-tab ui-tabs-active"><a href="#example-6-scss" class=ui-tabs-anchor><span class=caps>SCSS</span></a></li><li class=ui-tabs-tab><a href="#example-6-sass" class=ui-tabs-anchor>Sass</a></li></ul><div id=example-6-scss class="ui-tabs-panel scss"><h3 class=visuallyhidden><span class=caps>SCSS</span>&nbsp;Syntax</h3><pre class="highlight scss"><code><span class="k">@function</span> <span class="nf">fg</span><span class="p">(</span><span class="nv">$args</span><span class="o">...</span><span class="p">)</span> <span class="p">{</span>&#x000A;  <span class="k">@warn</span> <span class="s2">"The fg() function is deprecated. Call foreground() instead."</span><span class="p">;</span>&#x000A;  <span class="k">@return</span> <span class="nf">foreground</span><span class="p">(</span><span class="nv">$args</span><span class="o">...</span><span class="p">);</span>&#x000A;<span class="p">}</span>&#x000A;</code></pre></div><div id=example-6-sass class="ui-tabs-panel sass ui-tabs-panel-inactive"><h3 class=visuallyhidden>Sass&nbsp;Syntax</h3><pre class="highlight sass"><code><span class="k">@function</span> <span class="nf">fg</span><span class="p">(</span><span class="nv">$args</span><span class="o">...</span><span class="p">)</span>&#x000A;  <span class="k">@warn</span> <span class="s2">"The fg() function is deprecated. Call foreground() instead."</span>&#x000A;  <span class="k">@return</span> <span class="nf">foreground</span><span class="p">(</span><span class="nv">$args</span><span class="o">...</span><span class="p">)</span>&#x000A;&#x000A;</code></pre></div></div> </div> <h2 id=return> <a class=anchor href="#return"><span class=visuallyhidden>@return permalink</span></a><code>@return</code> </h2> <p>The <code>@return</code> at-rule indicates the value to use as the result of calling&nbsp;a function. It&rsquo;s only allowed within a <code>@function</code> body, and each <code>@function</code>&nbsp;must end with a&nbsp;<code>@return</code>.</p> <p>When a <code>@return</code> is encountered, it immediately ends the function and&nbsp;returns its result. Returning early can be useful for handling edge-cases or cases&nbsp;where a more efficient algorithm is available without wrapping the entire function&nbsp;in an <a href="control/if#else"><code>@else</code> block</a>.</p> <div class="code-example ui-tabs "><ul class="ui-tabs-nav ui-helper-reset ui-helper-clearfix"><li class="ui-tabs-tab ui-tabs-active"><a href="#example-7-scss" class=ui-tabs-anchor><span class=caps>SCSS</span></a></li><li class=ui-tabs-tab><a href="#example-7-sass" class=ui-tabs-anchor>Sass</a></li></ul><div id=example-7-scss class="ui-tabs-panel scss"><h3 class=visuallyhidden><span class=caps>SCSS</span>&nbsp;Syntax</h3><pre class="highlight scss"><code><span class="k">@use</span> <span class="s2">"sass:string"</span><span class="p">;</span>&#x000A;&#x000A;<span class="k">@function</span> <span class="nf">str-insert</span><span class="p">(</span><span class="nv">$string</span><span class="o">,</span> <span class="nv">$insert</span><span class="o">,</span> <span class="nv">$index</span><span class="p">)</span> <span class="p">{</span>&#x000A;  <span class="c1">// Avoid making new strings if we don't need to.&#x000A;</span>  <span class="k">@if</span> <span class="n">string</span><span class="o">.</span><span class="nf">length</span><span class="p">(</span><span class="nv">$string</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>&#x000A;    <span class="k">@return</span> <span class="nv">$insert</span><span class="p">;</span>&#x000A;  <span class="p">}</span>&#x000A;&#x000A;  <span class="nv">$before</span><span class="p">:</span> <span class="n">string</span><span class="o">.</span><span class="nf">slice</span><span class="p">(</span><span class="nv">$string</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="nv">$index</span><span class="p">);</span>&#x000A;  <span class="nv">$after</span><span class="p">:</span> <span class="n">string</span><span class="o">.</span><span class="nf">slice</span><span class="p">(</span><span class="nv">$string</span><span class="o">,</span> <span class="nv">$index</span><span class="p">);</span>&#x000A;  <span class="k">@return</span> <span class="nv">$before</span> <span class="o">+</span> <span class="nv">$insert</span> <span class="o">+</span> <span class="nv">$after</span><span class="p">;</span>&#x000A;<span class="p">}</span>&#x000A;</code></pre></div><div id=example-7-sass class="ui-tabs-panel sass ui-tabs-panel-inactive"><h3 class=visuallyhidden>Sass&nbsp;Syntax</h3><pre class="highlight sass"><code><span class="k">@use</span> <span class="s2">"sass:string"</span>&#x000A;&#x000A;<span class="k">@function</span> <span class="nf">str-insert</span><span class="p">(</span><span class="nv">$string</span><span class="o">,</span> <span class="nv">$insert</span><span class="o">,</span> <span class="nv">$index</span><span class="p">)</span>&#x000A;  <span class="c1">// Avoid making new strings if we don't need to.&#x000A;</span>  <span class="k">@if</span> <span class="n">string</span><span class="o">.</span><span class="nf">length</span><span class="p">(</span><span class="nv">$string</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span>&#x000A;    <span class="k">@return</span> <span class="nv">$insert</span>&#x000A;&#x000A;&#x000A;  <span class="nv">$before</span><span class="p">:</span> <span class="n">string</span><span class="o">.</span><span class="nf">slice</span><span class="p">(</span><span class="nv">$string</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="nv">$index</span><span class="p">)</span>&#x000A;  <span class="nv">$after</span><span class="p">:</span> <span class="n">string</span><span class="o">.</span><span class="nf">slice</span><span class="p">(</span><span class="nv">$string</span><span class="o">,</span> <span class="nv">$index</span><span class="p">)</span>&#x000A;  <span class="k">@return</span> <span class="nv">$before</span> <span class="o">+</span> <span class="nv">$insert</span> <span class="o">+</span> <span class="nv">$after</span>&#x000A;&#x000A;</code></pre></div></div> <h2 id=other-functions> <a class=anchor href="#other-functions"><span class=visuallyhidden>Other Functions permalink</span></a>Other&nbsp;Functions</h2> <p>In addition to user-defined function, Sass provides a substantial <a href="../modules">core library</a> of built-in functions that are always available to use.&nbsp;Sass implementations also make it possible to define <a href="../js-api#functions">custom functions</a> in the&nbsp;host language. And of course, you can always call <a href="#plain-css-functions">plain <span class=caps>CSS</span> functions</a> (even&nbsp;ones with <a href="../syntax/special-functions">weird syntax</a>).</p> <h3 id=plain-css-functions> <a class=anchor href="#plain-css-functions"><span class=visuallyhidden>Plain <span class=caps>CSS</span> Functions permalink</span></a>Plain <span class=caps>CSS</span>&nbsp;Functions</h3> <p>Any function call that&rsquo;s not either a user-defined or <a href="../modules">built-in</a> function is compiled to a plain <span class=caps>CSS</span> function (unless it uses <a href="../at-rules/function#arguments">Sass&nbsp;argument syntax</a>). The arguments will be compiled to&nbsp;<span class=caps>CSS</span> and included as-is in the function call. This ensures that Sass supports all&nbsp;<span class=caps>CSS</span> functions without needing to release new versions every time a new one is&nbsp;added.</p> <div class="code-example ui-tabs "><ul class="ui-tabs-nav ui-helper-reset ui-helper-clearfix"><li class="ui-tabs-tab ui-tabs-active"><a href="#example-8-scss" class=ui-tabs-anchor><span class=caps>SCSS</span></a></li><li class=ui-tabs-tab><a href="#example-8-sass" class=ui-tabs-anchor>Sass</a></li></ul><div id=example-8-scss class="ui-tabs-panel scss"><h3 class=visuallyhidden><span class=caps>SCSS</span>&nbsp;Syntax</h3><pre class="highlight scss"><code><span class="k">@debug</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">main-bg-color</span><span class="p">);</span> <span class="c1">// var(--main-bg-color)&#x000A;</span>&#x000A;<span class="nv">$primary</span><span class="p">:</span> <span class="mh">#f2ece4</span><span class="p">;</span>&#x000A;<span class="nv">$accent</span><span class="p">:</span> <span class="mh">#e1d7d2</span><span class="p">;</span>&#x000A;<span class="k">@debug</span> <span class="nf">radial-gradient</span><span class="p">(</span><span class="nv">$primary</span><span class="o">,</span> <span class="nv">$accent</span><span class="p">);</span> <span class="c1">// radial-gradient(#f2ece4, #e1d7d2)&#x000A;</span></code></pre></div><div id=example-8-sass class="ui-tabs-panel sass ui-tabs-panel-inactive"><h3 class=visuallyhidden>Sass&nbsp;Syntax</h3><pre class="highlight sass"><code><span class="k">@debug</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">main-bg-color</span><span class="p">)</span>  <span class="o">//</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">main-bg-color</span><span class="p">)</span>&#x000A;&#x000A;<span class="nv">$primary</span><span class="p">:</span> <span class="mh">#f2ece4</span>&#x000A;<span class="nv">$accent</span><span class="p">:</span> <span class="mh">#e1d7d2</span>&#x000A;<span class="k">@debug</span> <span class="nf">radial-gradient</span><span class="p">(</span><span class="nv">$primary</span><span class="o">,</span> <span class="nv">$accent</span><span class="p">)</span>  <span class="o">//</span> <span class="nf">radial-gradient</span><span class="p">(</span><span class="mh">#f2ece4</span><span class="o">,</span> <span class="mh">#e1d7d2</span><span class="p">)</span>&#x000A;</code></pre></div></div> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>Because any unknown function will be compiled to <span class=caps>CSS</span>, it&rsquo;s easy to miss when you typo a function name. Consider running a <a href="https://stylelint.io/"><span class=caps>CSS</span> linter</a> on your stylesheet&rsquo;s output to be notified when this&nbsp;happens!</p> </div> <div class="sl-c-callout sl-c-callout--fun-fact"><h3>💡 Fun&nbsp;fact:</h3> <p>Some <span class=caps>CSS</span> functions, like <code>calc()</code> and <code>element()</code> have unusual syntax. Sass <a href="../syntax/special-functions">parses these functions specially</a> as <a href="../values/strings#unquoted">unquoted strings</a>.</p> </div> </div> </div> </div> </div> </div> </div> </div> </div> <div class=sl-c-alert> <div aria-labelledby=release-nav class='sl-l-container sl-c-list-horizontal-wrapper'> <ul class=sl-l-grid--justify-center> <li id=release-nav> Current Releases: </li> <li> <span class=release-name><a href="/dart-sass">Dart Sass</a>&#32;<a href="https://github.com/sass/dart-sass/releases/tag/1.24.4">1.24.4</a></span> </li> <li> <span class=release-name><a href="/libsass">LibSass</a>&#32;<a href="https://github.com/sass/libsass/releases/tag/3.6.3">3.6.3</a></span> </li> <li> <span class=release-name><a href="/ruby-sass">Ruby Sass</a><span aria-label=coffin role=presentation> &#32; ⚰ </span></span> </li> <li class='sl-l-grid__column sl-l-large-grid__column--auto-size'> <a href="/implementation">Implementation Guide</a> </li> </ul> </div> </div> </main> <footer class='site-footer contentinfo' itemscope=itemscope itemtype='http://schema.org/WPFooter' role=contentinfo> <div class='sl-l-container sl-l-section'> <div class='sl-l-grid sl-l-grid--full sl-l-large-grid--fit sl-l-large-grid--center sl-l-large-grid--gutters'> <div class=sl-l-grid__column> <p>Sass &copy; 2006&ndash;2020 <a href="https://github.com/hcatlin">Hampton Catlin</a>, <a href="https://twitter.com/nex3">Natalie Weizenbaum</a>, <a href="http://chriseppstein.github.io/">Chris Eppstein</a>, <a href="https://www.sushiandrobots.com">Jina Anne</a>, and numerous contributors. It is available for use and modification under the <a href="https://github.com/sass/dart-sass/blob/master/LICENSE">MIT&nbsp;License</a>.</p> <nav class=sl-c-list-horizontal-wrapper> <ul> <li><a href="https://github.com/sass">Sass on GitHub</a></li> <li><a href="https://github.com/sass/sass-site">Website Source Code</a></li> <li><a href="/styleguide">Style Guide</a></li> <li><a href="/community-guidelines">Community Guidelines</a></li> </ul> </nav> </div> <div class='sl-l-grid__column sl-l-large-grid__column--auto-size sl-l-large-grid--justify-right'> <a class=twitter-follow-button data-show-count=false data-size=large href='https://twitter.com/SassCSS'> Follow @SassCSS </a> <script>
  !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');
</script> </div> </div> </div> </footer> <script src="https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.js"></script> <script>
  docsearch({
    apiKey: 'a409ff5d6a2476083c1a8dd1f8c04ec5',
    indexName: 'sass-lang',
    inputSelector: 'input.search',
    transformData: function(hits) {
      var domain = window.location.origin + "/";
      hits.forEach(function(hit) {
        if (!hit.url.startsWith(domain)) {
          hit.url = hit.url.replace(/^https?:\/\/[^\/]+\//, domain);
        }
      });
      return hits;
    },
    debug: false
  });
</script> <script src="/assets/js/sass-184dcd58.js"></script> </body> </html>