<!DOCTYPE html> <html class=no-js lang=en> <head> <meta charset=utf-8> <meta content='IE=edge' http-equiv=X-UA-Compatible> <title>Sass: JavaScript API</title> <meta content='Syntatically Awesome Style Sheets' name=description> <meta content='width=device-width, initial-scale=1' name=viewport> <link href='/feed.xml' rel=alternate type='application/atom+xml'> <link href="https://fonts.googleapis.com/css?family=Source+Code+Pro|Source+Sans+Pro:300,400,600|Source+Serif+Pro" rel=stylesheet /> <link href="https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.css" rel=stylesheet /> <link href="/assets/css/sass-6cc9628c.css" rel=stylesheet /> <noscript><link href="/assets/css/noscript-c6723936.css" rel=stylesheet /></noscript> <script>
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-535380-8']);
  _gaq.push(['_trackPageview']);
  
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script> <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  
  ga('create', 'UA-535380-14', 'sass-lang.com');
  ga('send', 'pageview');
</script> </head> <body class='documentation documentation_js-api'> <!--[if lt IE 9]><p class=browserupgrade> You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience and security. </p><![endif]--> <header class=sl-r-banner itemscope=itemscope itemtype='http://schema.org/WPHeader' role=banner> <div class='sl-c-alert sl-c-alert--info'> <div class=sl-l-container> <p> Sass just launched a brand new module system. <a href="/blog/the-module-system-is-launched">Learn all about the module system on the Sass blog </a>! </p> </div> </div> <div class=sl-c-pop-stripe></div> <div class=sl-l-container> <div class='sl-l-grid sl-l-grid--full sl-l-large-grid--fit sl-l-large-grid--center sl-l-large-grid--gutters'> <p class='sl-l-grid__column sl-r-banner__brand'> <a href="/"><img alt=Sass height=48 src="/assets/img/logos/logo-b6e1ef6e.svg"/> </a></p> <nav aria-label='Site navigation' class='sl-r-banner__navigation sl-l-grid__column sl-l-large-grid sl-l-large-grid__column--auto-size sl-c-list-horizontal-wrapper' itemscope=itemscope itemtype='http://schema.org/SiteNavigationElement' role=navigation> <ul> <li><a href="/install">Install</a></li> <li><a href="/guide">Learn Sass</a></li> <li><a href="/blog">Blog</a></li> <li><a href="/documentation">Documentation</a></li> <li><a href="/community">Get Involved</a></li> <li><label class=visuallyhidden for=s>Search</label><input placeholder=Search class=search id=s name=s></li> </ul> </nav> </div> </div> </header> <main class=content id=main-content itemprop=mainContentOfPage role=main> <h1 class=sl-l-container> JavaScript&nbsp;<span class=caps>API</span> </h1> <div class='sl-background--white sl-l-container sl-l-section'><div class=sl-l-medium-holy-grail> <div class=sl-l-medium-holy-grail__body> <nav aria-label='Content navigation' class=sl-l-medium-holy-grail__navigation role=navigation> <div class='sl-c-list-navigation-wrapper sl-c-list-navigation-wrapper--collapsible'> <h2>Contents</h2> <ul><li><a href="/documentation/syntax" class=section>Syntax</a> <ul><li class=overview><a href="/documentation/syntax">Overview</a></li> <li><a href="/documentation/syntax/parsing" class="">Parsing a Stylesheet</a> </li> <li><a href="/documentation/syntax/structure" class="">Structure of a Stylesheet</a> </li> <li><a href="/documentation/syntax/comments" class="">Comments</a> </li> <li><a href="/documentation/syntax/special-functions" class="">Special Functions</a> </li> </ul> </li> <li><a href="/documentation/style-rules" class=section>Style Rules</a> <ul><li class=overview><a href="/documentation/style-rules">Overview</a></li> <li><a href="/documentation/style-rules/declarations" class="">Property Declarations</a> </li> <li><a href="/documentation/style-rules/parent-selector" class="">Parent Selector</a> </li> <li><a href="/documentation/style-rules/placeholder-selectors" class="">Placeholder Selectors</a> </li> </ul> </li> <li><a href="/documentation/variables" class="">Variables</a> </li> <li><a href="/documentation/interpolation" class="">Interpolation</a> </li> <li><a href="/documentation/at-rules" class=section>At-Rules</a> <ul><li class=overview><a href="/documentation/at-rules">Overview</a></li> <li><a href="/documentation/at-rules/use" class=""><code>@use</code></a> </li> <li><a href="/documentation/at-rules/forward" class=""><code>@forward</code></a> </li> <li><a href="/documentation/at-rules/import" class=""><code>@import</code></a> </li> <li><a href="/documentation/at-rules/mixin" class=""><code>@mixin</code> and <code>@include</code></a> </li> <li><a href="/documentation/at-rules/function" class=""><code>@function</code></a> </li> <li><a href="/documentation/at-rules/extend" class=""><code>@extend</code></a> </li> <li><a href="/documentation/at-rules/error" class=""><code>@error</code></a> </li> <li><a href="/documentation/at-rules/warn" class=""><code>@warn</code></a> </li> <li><a href="/documentation/at-rules/debug" class=""><code>@debug</code></a> </li> <li><a href="/documentation/at-rules/at-root" class=""><code>@at-root</code></a> </li> <li><a href="/documentation/at-rules/control" class=section>Flow Control</a> <ul><li class=overview><a href="/documentation/at-rules/control">Overview</a></li> <li><a href="/documentation/at-rules/control/if" class=""><code>@if</code> and <code>@else</code></a> </li> <li><a href="/documentation/at-rules/control/each" class=""><code>@each</code></a> </li> <li><a href="/documentation/at-rules/control/for" class=""><code>@for</code></a> </li> <li><a href="/documentation/at-rules/control/while" class=""><code>@while</code></a> </li> </ul> </li> <li><a href="/documentation/at-rules/css" class="">From CSS</a> </li> </ul> </li> <li><a href="/documentation/values" class=section>Values</a> <ul><li class=overview><a href="/documentation/values">Overview</a></li> <li><a href="/documentation/values/numbers" class="">Numbers</a> </li> <li><a href="/documentation/values/strings" class="">Strings</a> </li> <li><a href="/documentation/values/colors" class="">Colors</a> </li> <li><a href="/documentation/values/lists" class="">Lists</a> </li> <li><a href="/documentation/values/maps" class="">Maps</a> </li> <li><a href="/documentation/values/booleans" class=""><code>true</code> and <code>false</code></a> </li> <li><a href="/documentation/values/null" class=""><code>null</code></a> </li> <li><a href="/documentation/values/functions" class="">Functions</a> </li> </ul> </li> <li><a href="/documentation/operators" class=section>Operators</a> <ul><li class=overview><a href="/documentation/operators">Overview</a></li> <li><a href="/documentation/operators/equality" class="">Equality</a> </li> <li><a href="/documentation/operators/relational" class="">Relational</a> </li> <li><a href="/documentation/operators/numeric" class="">Numeric</a> </li> <li><a href="/documentation/operators/string" class="">String</a> </li> <li><a href="/documentation/operators/boolean" class="">Boolean</a> </li> </ul> </li> <li><a href="/documentation/modules" class=section>Built-In Modules</a> <ul><li class=overview><a href="/documentation/modules">Overview</a></li> <li><a href="/documentation/modules/color" class=""><code>sass:color</code></a> </li> <li><a href="/documentation/modules/list" class=""><code>sass:list</code></a> </li> <li><a href="/documentation/modules/map" class=""><code>sass:map</code></a> </li> <li><a href="/documentation/modules/math" class=""><code>sass:math</code></a> </li> <li><a href="/documentation/modules/meta" class=""><code>sass:meta</code></a> </li> <li><a href="/documentation/modules/selector" class=""><code>sass:selector</code></a> </li> <li><a href="/documentation/modules/string" class=""><code>sass:string</code></a> </li> </ul> </li> <li><a href="/documentation/breaking-changes" class=section>Breaking Changes</a> <ul><li class=overview><a href="/documentation/breaking-changes">Overview</a></li> <li><a href="/documentation/breaking-changes/extend-compound" class="">Extending Compound Selectors</a> </li> <li><a href="/documentation/breaking-changes/css-vars" class="">CSS Variable Syntax</a> </li> </ul> </li> <li><a href="/documentation/cli" class=section>Command Line</a> <ul><li class=overview><a href="/documentation/cli">Overview</a></li> <li><a href="/documentation/cli/dart-sass" class="">Dart Sass</a> </li> <li><a href="/documentation/cli/ruby-sass" class="">Ruby Sass</a> </li> <li><a href="/documentation/cli/migrator" class="">Migrator</a> </li> </ul> </li> <li><a href="/documentation/js-api" class="open selected">JavaScript API</a> </li> </ul> </div> </nav> <div class=sl-l-medium-holy-grail__main> <div class=sl-l-large-holy-grail> <div class=sl-l-large-holy-grail__body> <div class='sl-l-large-holy-grail__complementary sl-l-large-holy-grail__complementary--contents'> <nav aria-labelledby=page-sections class='page-sections sl-c-list-navigation-wrapper sl-c-list-navigation-wrapper--collapsible'> <h3 id=page-sections>Page Sections</h3> <ul> <li> <a href="#usage" class=section>Usage</a> <ul> <li class=overview><a href="#usage">Overview</a></li> <li> <a href="#rendersync"><code>renderSync()</code></a> </li> <li> <a href="#render"><code>render()</code></a> </li> <li> <a href="#info"><code>info</code></a> </li> <li> <a href="#result-object" class=section>Result Object</a> <ul> <li class=overview><a href="#result-object">Overview</a></li> <li> <a href="#result-css"><code>css</code></a> </li> <li> <a href="#result-map"><code>map</code></a> </li> <li> <a href="#result-stats-includedfiles"><code>stats.includedFiles</code></a> </li> <li> <a href="#result-stats-entry"><code>stats.entry</code></a> </li> <li> <a href="#result-stats-start"><code>stats.start</code></a> </li> <li> <a href="#result-stats-end"><code>stats.end</code></a> </li> <li> <a href="#result-stats-duration"><code>stats.duration</code></a> </li> </ul> </li> <li> <a href="#error-object" class=section>Error Object</a> <ul> <li class=overview><a href="#error-object">Overview</a></li> <li> <a href="#error-formatted"><code>formatted</code></a> </li> <li> <a href="#error-file"><code>file</code></a> </li> <li> <a href="#error-line"><code>line</code></a> </li> <li> <a href="#error-column"><code>column</code></a> </li> <li> <a href="#error-status"><code>status</code></a> </li> </ul> </li> </ul> </li> <li> <a href="#options" class=section>Options</a> <ul> <li class=overview><a href="#options">Overview</a></li> <li> <a href="#input" class=section>Input</a> <ul> <li class=overview><a href="#input">Overview</a></li> <li> <a href="#file"><code>file</code></a> </li> <li> <a href="#data"><code>data</code></a> </li> </ul> </li> <li> <a href="#indentedsyntax"><code>indentedSyntax</code></a> </li> <li> <a href="#includepaths"><code>includePaths</code></a> </li> <li> <a href="#output" class=section>Output</a> <ul> <li class=overview><a href="#output">Overview</a></li> <li> <a href="#outputstyle"><code>outputStyle</code></a> </li> <li> <a href="#precision"><code>precision</code></a> </li> <li> <a href="#indenttype"><code>indentType</code></a> </li> <li> <a href="#indentwidth"><code>indentWidth</code></a> </li> <li> <a href="#linefeed"><code>linefeed</code></a> </li> <li> <a href="#sourcecomments"><code>sourceComments</code></a> </li> </ul> </li> <li> <a href="#source-maps" class=section>Source Maps</a> <ul> <li class=overview><a href="#source-maps">Overview</a></li> <li> <a href="#sourcemap"><code>sourceMap</code></a> </li> <li> <a href="#outfile"><code>outFile</code></a> </li> <li> <a href="#omitsourcemapurl"><code>omitSourceMapUrl</code></a> </li> <li> <a href="#sourcemapcontents"><code>sourceMapContents</code></a> </li> <li> <a href="#sourcemapembed"><code>sourceMapEmbed</code></a> </li> <li> <a href="#sourcemaproot"><code>sourceMapRoot</code></a> </li> </ul> </li> <li> <a href="#plugins" class=section>Plugins</a> <ul> <li class=overview><a href="#plugins">Overview</a></li> <li> <a href="#fiber"><code>fiber</code></a> </li> <li> <a href="#functions"><code>functions</code></a> </li> <li> <a href="#importer"><code>importer</code></a> </li> </ul> </li> </ul> </li> <li> <a href="#value-types" class=section>Value Types</a> <ul> <li class=overview><a href="#value-types">Overview</a></li> <li> <a href="#types-number" class=section><code>Number</code></a> <ul> <li class=overview><a href="#types-number">Overview</a></li> <li> <a href="#new-types-number-value-unit-39-39"><code>new Number()</code></a> </li> <li> <a href="#number-getvalue"><code>getValue()</code></a> </li> <li> <a href="#number-getunit"><code>getUnit()</code></a> </li> <li> <a href="#number-setvalue-value"><code>setValue()</code></a> </li> <li> <a href="#number-setunit-unit"><code>setUnit()</code></a> </li> </ul> </li> <li> <a href="#types-string" class=section><code>String</code></a> <ul> <li class=overview><a href="#types-string">Overview</a></li> <li> <a href="#new-types-string-value"><code>new String()</code></a> </li> <li> <a href="#string-getvalue"><code>getValue()</code></a> </li> <li> <a href="#string-setvalue-value"><code>setValue()</code></a> </li> </ul> </li> <li> <a href="#types-color" class=section><code>Color</code></a> <ul> <li class=overview><a href="#types-color">Overview</a></li> <li> <a href="#new-types-color-red-green-blue-alpha-1"><code>new Color()</code></a> </li> <li> <a href="#new-types-color-argb"><code>new Color()</code></a> </li> <li> <a href="#color-getr"><code>getR()</code></a> </li> <li> <a href="#color-getg"><code>getG()</code></a> </li> <li> <a href="#color-getb"><code>getB()</code></a> </li> <li> <a href="#color-geta"><code>getA()</code></a> </li> <li> <a href="#color-setr-red"><code>setR()</code></a> </li> <li> <a href="#color-setg-green"><code>setG()</code></a> </li> <li> <a href="#color-setb-blue"><code>setB()</code></a> </li> <li> <a href="#color-seta-alpha"><code>setA()</code></a> </li> </ul> </li> <li> <a href="#types-boolean" class=section><code>Boolean</code></a> <ul> <li class=overview><a href="#types-boolean">Overview</a></li> <li> <a href="#types-boolean-true"><code>TRUE</code></a> </li> <li> <a href="#types-boolean-false"><code>FALSE</code></a> </li> <li> <a href="#boolean-getvalue"><code>getValue()</code></a> </li> </ul> </li> <li> <a href="#types-list" class=section><code>List</code></a> <ul> <li class=overview><a href="#types-list">Overview</a></li> <li> <a href="#new-types-list-length-comma-true"><code>new List()</code></a> </li> <li> <a href="#list-getvalue-index"><code>getValue()</code></a> </li> <li> <a href="#list-getseparator"><code>getSeparator()</code></a> </li> <li> <a href="#list-getlength"><code>getLength()</code></a> </li> <li> <a href="#list-setvalue-index-value"><code>setValue()</code></a> </li> <li> <a href="#list-setseparator-comma"><code>setSeparator()</code></a> </li> </ul> </li> <li> <a href="#types-map" class=section><code>Map</code></a> <ul> <li class=overview><a href="#types-map">Overview</a></li> <li> <a href="#new-types-map-length"><code>new Map()</code></a> </li> <li> <a href="#map-getkey-index"><code>getKey()</code></a> </li> <li> <a href="#map-getvalue-index"><code>getValue()</code></a> </li> <li> <a href="#map-getlength"><code>getLength()</code></a> </li> <li> <a href="#map-setkey-index-key"><code>setKey()</code></a> </li> <li> <a href="#map-setvalue-index-value"><code>setValue()</code></a> </li> </ul> </li> <li> <a href="#types-null" class=section><code>Null</code></a> <ul> <li class=overview><a href="#types-null">Overview</a></li> <li> <a href="#types-null-null"><code>NULL</code></a> </li> </ul> </li> </ul> </li> <li> <a href="#integrations">Integrations</a> </li> </ul> </nav> </div> <div class='sl-l-large-holy-grail__main docSearch-content'> <div class='sl-l-container sl-l-container--small'> <div class=sl-c-introduction> <p>Both major Sass implementations support the same JavaScript API. <a href="/dart-sass">Dart Sass</a> is distributed as the pure-Javascript <a href="https://www.npmjs.com/package/sass"><code>sass</code> package</a>, and <a href="/libsass">LibSass</a> is distributed as a native extension in the <a href="https://www.npmjs.com/package/node-sass"><code>node-sass</code> package</a>.</p> </div> <h2 id=usage> <a class=anchor href="#usage"><span class=visuallyhidden>Usage permalink</span></a>Usage</h2> <p>The Sass module provides two functions with similar&nbsp;APIs.</p> <h3 id=rendersync> <a class=anchor href="#rendersync"><span class=visuallyhidden>renderSync() permalink</span></a><code>renderSync()</code> </h3> <p>This function synchronously compiles a Sass file to <span class=caps>CSS.</span> If it succeeds,&nbsp;it returns the <a href="#result-object">result</a>, and if it fails it throws an <a href="#error-object">error</a>. It takes&nbsp;an <a href="#options">options object</a>, which must have either the <a href="#file"><code>file</code> option</a> or&nbsp;the <a href="#data"><code>data</code> option</a>&nbsp;set.</p> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">sass</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'sass'</span><span class="p">);</span> <span class="c1">// or require('node-sass');</span>

<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span><span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">});</span>
<span class="c1">// ...</span>
</code></pre> <h3 id=render> <a class=anchor href="#render"><span class=visuallyhidden>render() permalink</span></a><code>render()</code> </h3> <dl class="impl-status sl-c-description-list sl-c-description-list--horizontal"><div class=compatibility>Compatibility:</div> <div><dt>Dart&nbsp;Sass</dt> <dd>✓</dd> </div> <div><dt>Node&nbsp;Sass</dt> <dd>since&nbsp;<span class=caps>3.0.0</span></dd> </div> </dl> <p>This function asynchronously compiles a Sass file to <span class=caps>CSS</span>, and calls a&nbsp;standard Node callback with the <a href="#result-object">result</a> or an <a href="#error-object">error</a> when the rendering&nbsp;is complete. It takes an <a href="#options">options object</a>, which must have either&nbsp;the <a href="#file"><code>file</code> option</a> or the <a href="#data"><code>data</code> option</a>&nbsp;set.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>When using Dart Sass, <strong><a href="#rendersync"><code>renderSync()</code></a> is almost twice as fast as <code>render()</code></strong> by default, due to the overhead of making the entire evaluation process asynchronous. To avoid this performance hit, you can pass the <a href="#fiber"><code>fiber</code> option</a> to&nbsp;<code>render()</code>.</p> </div> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">sass</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'sass'</span><span class="p">);</span> <span class="c1">// or require('node-sass');</span>

<span class="nx">sass</span><span class="p">.</span><span class="nx">render</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">});</span>
</code></pre> <h3 id=info> <a class=anchor href="#info"><span class=visuallyhidden>info permalink</span></a><code>info</code> </h3> <dl class="impl-status sl-c-description-list sl-c-description-list--horizontal"><div class=compatibility>Compatibility:</div> <div><dt>Dart&nbsp;Sass</dt> <dd>✓</dd> </div> <div><dt>Node&nbsp;Sass</dt> <dd>since&nbsp;<span class=caps>2.0.0</span></dd> </div> </dl> <p>The <code>info</code> property contains a string that includes tab-separated&nbsp;information about the Sass implementation. For Dart Sass, this is the version of Dart&nbsp;Sass and the version of the <a href="https://webdev.dartlang.org/tools/dart2js">dart2js</a> compiler used to compile it to&nbsp;JavaScript; for LibSass, it&rsquo;s the version of LibSass and the version of <a href="https://www.npmjs.com/package/node-sass">Node Sass</a>&nbsp;that wraps&nbsp;it.</p> <pre class="highlight javascript"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sass</span><span class="p">.</span><span class="nx">info</span><span class="p">);</span>
<span class="c1">// dart-sass    1.24.4  (Sass Compiler) [Dart]</span>
<span class="c1">// dart2js  2.0.0   (Dart Compiler) [Dart]</span>
</code></pre> <h3 id=result-object> <a class=anchor href="#result-object"><span class=visuallyhidden>Result Object permalink</span></a>Result&nbsp;Object</h3> <p>When <a href="#rendersync"><code>renderSync()</code></a> or <a href="#render"><code>render()</code></a> succeed, they provide a result&nbsp;object that contains information about the compilation. This object has the&nbsp;following properties:</p> <h4 id=result-css> <a class=anchor href="#result-css"><span class=visuallyhidden>result.css permalink</span></a><code>result.css</code> </h4> <p>The compiled <span class=caps>CSS</span>, as a <a href="https://nodejs.org/api/buffer.html">Buffer</a>. This can be converted to a string by&nbsp;calling <a href="https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end"><code>Buffer.toString()</code></a>.</p> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span><span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
</code></pre> <h4 id=result-map> <a class=anchor href="#result-map"><span class=visuallyhidden>result.map permalink</span></a><code>result.map</code> </h4> <p>The source map that maps the compiled <span class=caps>CSS</span> to the source files from which it&nbsp;was generated, as a <a href="https://nodejs.org/api/buffer.html">Buffer</a>. This can be converted to a string by&nbsp;calling <a href="https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end"><code>Buffer.toString()</code></a>.</p> <p>This is <code>null</code> or <code>undefined</code> unless&nbsp;either</p> <ul> <li>the <a href="#sourcemap"><code>sourceMap</code> option</a> is a string;&nbsp;or</li> <li>the <code>sourceMap</code> option is <code>true</code> <em>and</em> the <a href="#outfile"><code>outFile</code> option</a> is&nbsp;set.</li> </ul> <p>The source map uses absolute <a href="https://en.wikipedia.org/wiki/File_URI_scheme"><code>file:</code> URLs</a> to link to the Sass source&nbsp;files, except if the source file comes from the <a href="#data"><code>data</code> option</a> in which case&nbsp;it lists its <span class=caps>URL</span> as&nbsp;<code>stdin</code>.</p> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">sourceMap</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">outFile</span><span class="p">:</span> <span class="s2">"style.css"</span>
<span class="p">})</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
</code></pre> <h4 id=result-stats-includedfiles> <a class=anchor href="#result-stats-includedfiles"><span class=visuallyhidden>result.stats.includedFiles permalink</span></a><code>result.stats.includedFiles</code> </h4> <p>An array of the absolute paths of all Sass files loaded during compilation. If&nbsp;a stylesheet was loaded from an <a href="#importer">importer</a> that returned the&nbsp;stylesheet&rsquo;s contents, the raw string of the <code>@use</code> or <code>@import</code> that loaded that&nbsp;stylesheet is included in this&nbsp;array.</p> <h4 id=result-stats-entry> <a class=anchor href="#result-stats-entry"><span class=visuallyhidden>result.stats.entry permalink</span></a><code>result.stats.entry</code> </h4> <p>The absolute path of the input file passed as the <a href="#file"><code>file</code> option</a>, or&nbsp;<code>&quot;data&quot;</code> if the <a href="#data"><code>data</code> option</a> was passed&nbsp;instead.</p> <h4 id=result-stats-start> <a class=anchor href="#result-stats-start"><span class=visuallyhidden>result.stats.start permalink</span></a><code>result.stats.start</code> </h4> <p>The number of milliseconds between 1 January 1970 at 00:00:00 <span class=caps>UTC</span> and the&nbsp;time at which Sass compilation&nbsp;began.</p> <h4 id=result-stats-end> <a class=anchor href="#result-stats-end"><span class=visuallyhidden>result.stats.end permalink</span></a><code>result.stats.end</code> </h4> <p>The number of milliseconds between 1 January 1970 at 00:00:00 <span class=caps>UTC</span> and the&nbsp;time at which Sass compilation&nbsp;ended.</p> <h4 id=result-stats-duration> <a class=anchor href="#result-stats-duration"><span class=visuallyhidden>result.stats.duration permalink</span></a><code>result.stats.duration</code> </h4> <p>The number of milliseconds it took to compile the Sass file. This is&nbsp;always equal to <a href="#result-stats-start"><code>result.stats.start</code></a> minus <a href="#result-stats-end"><code>result.stats.end</code></a>.</p> <h3 id=error-object> <a class=anchor href="#error-object"><span class=visuallyhidden>Error Object permalink</span></a>Error&nbsp;Object</h3> <p>When <a href="#rendersync"><code>renderSync()</code></a> or <a href="#render"><code>render()</code></a> fail, they provide&nbsp;an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"><code>Error</code> object</a> that contains information about the compilation. This&nbsp;object has the following properties, in addition to the standard <code>Error</code>&nbsp;properties:</p> <h4 id=error-formatted> <a class=anchor href="#error-formatted"><span class=visuallyhidden>error.formatted permalink</span></a><code>error.formatted</code> </h4> <p>A string representation of the error. In <a href="https://www.npmjs.com/package/node-sass">Node Sass</a>, this is more&nbsp;detailed than <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString"><code>error.toString()</code></a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message"><code>error.message</code></a>. In <a href="/dart-sass">Dart Sass</a>,&nbsp;it provides the same&nbsp;information.</p> <h4 id=error-file> <a class=anchor href="#error-file"><span class=visuallyhidden>error.file permalink</span></a><code>error.file</code> </h4> <p>The stylesheet where the error occurred. If the error occurred in a&nbsp;stylesheet loaded from disk, this is the absolute path of that stylesheet. If the&nbsp;error occurred in a stylesheet that was loaded from an <a href="#importer">importer</a> which returned&nbsp;the stylesheet&rsquo;s contents, this is the raw string of the <code>@use</code> or <code>@import</code>&nbsp;that loaded that stylesheet. If it occurred in the contents of the <a href="#data"><code>data</code> option</a>, this is the string&nbsp;<code>&quot;stdin&quot;</code>.</p> <h4 id=error-line> <a class=anchor href="#error-line"><span class=visuallyhidden>error.line permalink</span></a><code>error.line</code> </h4> <p>The line in <a href="#error-file"><code>error.file</code></a> on which the error&nbsp;occurred.</p> <h4 id=error-column> <a class=anchor href="#error-column"><span class=visuallyhidden>error.column permalink</span></a><code>error.column</code> </h4> <p>The column of <a href="#error-line"><code>error.line</code></a> in <a href="#error-file"><code>error.file</code></a> on which the error&nbsp;occurred.</p> <h4 id=error-status> <a class=anchor href="#error-status"><span class=visuallyhidden>error.status permalink</span></a><code>error.status</code> </h4> <p>The <a href="https://en.wikipedia.org/wiki/Exit_status">exit status</a> that should be used if this error causes the&nbsp;enclosing program to&nbsp;exit.</p> <h2 id=options> <a class=anchor href="#options"><span class=visuallyhidden>Options permalink</span></a>Options</h2> <h3 id=input> <a class=anchor href="#input"><span class=visuallyhidden>Input permalink</span></a>Input</h3> <p>These options control how Sass loads it input&nbsp;files.</p> <h4 id=file> <a class=anchor href="#file"><span class=visuallyhidden>file permalink</span></a><code>file</code> </h4> <dl class="impl-status sl-c-description-list sl-c-description-list--horizontal"><div class=compatibility>Compatibility (Plain <span class=caps>CSS</span> Files):</div> <div><dt>Dart&nbsp;Sass</dt> <dd>since&nbsp;<span class=caps>1.11.0</span></dd> </div> <div><dt>Node&nbsp;Sass</dt> <dd>partial</dd> </div> <div><a>▶</a></div> </dl> <div class="sl-c-callout sl-c-callout--impl-status"><p>Node Sass and older versions of Dart Sass support loading files with the extension <code>.css</code>, but contrary to the specification they&rsquo;re treated as <span class=caps>SCSS</span> files rather than being parsed as <span class=caps>CSS.</span> This behavior has been deprecated in Node Sass, and an update is in the works to load them as plain <span class=caps>CSS</span>&nbsp;instead.</p> <p>All versions of Node Sass and Dart Sass otherwise support the <code>file</code> option as described&nbsp;below.</p></div> <p>This string option is the path to the file for Sass to load and compile. If&nbsp;the file&rsquo;s extension is <code>.scss</code>, it will be parsed as <a href="syntax#scss"><span class=caps>SCSS</span></a>; if it&rsquo;s <code>.sass</code>,&nbsp;it will be parsed as the <a href="syntax#the-indented-syntax">indented syntax</a>; and if it&rsquo;s <code>.css</code>, it will be&nbsp;parsed as <a href="at-rules/import#importing-css">plain <span class=caps>CSS</span></a>. If it has no extension, it will be parsed as&nbsp;<span class=caps>SCSS.</span></p> <p>If the <code>file</code> option and the <a href="#data"><code>data</code> option</a> are both passed, the&nbsp;<code>file</code> option is used as the path of the stylesheet for error reporting, but the&nbsp;<code>data</code> option is used as the contents of the stylesheet. In this case, the&nbsp;<code>file</code> option&rsquo;s extension is <em>not</em> used to determine the syntax of the&nbsp;stylesheet.</p> <pre class="highlight javascript"><code><span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span><span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">});</span>
</code></pre> <h4 id=data> <a class=anchor href="#data"><span class=visuallyhidden>data permalink</span></a><code>data</code> </h4> <p>This string option provides the contents of the stylesheet to compile.&nbsp;Unless the <a href="#file"><code>file</code> option</a> is passed as well, the stylesheet&rsquo;s <span class=caps>URL</span> is set&nbsp;to <code>&quot;stdin&quot;</code>.</p> <p>By default, this stylesheet is parsed as <a href="syntax#scss"><span class=caps>SCSS</span></a>. This can be controlled&nbsp;using the <a href="#indentedsyntax"><code>indentedSyntax</code> option</a>.</p> <pre class="highlight javascript"><code><span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">data</span><span class="p">:</span> <span class="err">`</span>
<span class="nx">h1</span> <span class="p">{</span>
  <span class="nx">font</span><span class="o">-</span><span class="na">size</span><span class="p">:</span> <span class="mi">40</span><span class="nx">px</span><span class="p">;</span>
<span class="p">}</span><span class="err">`</span>
<span class="p">});</span>
</code></pre> <h3 id=indentedsyntax> <a class=anchor href="#indentedsyntax"><span class=visuallyhidden>indentedSyntax permalink</span></a><code>indentedSyntax</code> </h3> <p>This flag controls whether the <a href="#data"><code>data</code> option</a> is parsed as the <a href="syntax#the-indented-syntax">indented syntax</a> or not. It defaults to <code>false</code>. It has no effect on stylesheets&nbsp;loaded using the <a href="#file"><code>file</code> option</a>.</p> <pre class="highlight javascript"><code><span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">data</span><span class="p">:</span> <span class="err">`</span>
<span class="nx">h1</span>
  <span class="nx">font</span><span class="o">-</span><span class="na">size</span><span class="p">:</span> <span class="mi">40</span><span class="nx">px</span><span class="err">`</span><span class="p">,</span>
  <span class="na">indentedSyntax</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">});</span>
</code></pre> <h3 id=includepaths> <a class=anchor href="#includepaths"><span class=visuallyhidden>includePaths permalink</span></a><code>includePaths</code> </h3> <dl class="impl-status sl-c-description-list sl-c-description-list--horizontal"><div class=compatibility>Compatibility (SASS_<span class=caps>PATH</span>):</div> <div><dt>Dart&nbsp;Sass</dt> <dd>since&nbsp;<span class=caps>1.15.0</span></dd> </div> <div><dt>Node&nbsp;Sass</dt> <dd>since&nbsp;<span class=caps>3.9.0</span></dd> </div> <div><a>▶</a></div> </dl> <div class="sl-c-callout sl-c-callout--impl-status"><p>Earlier versions of Dart Sass and Node Sass didn&rsquo;t support the <code>SASS_PATH</code> environment&nbsp;variable.</p></div> <p>This array of strings option provides <a href="at-rules/import#load-paths">load paths</a> for Sass to look&nbsp;for imports. Earlier load paths will take precedence over later&nbsp;ones.</p> <pre class="highlight javascript"><code><span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">includePaths</span><span class="p">:</span> <span class="p">[</span><span class="s2">"node_modules/bootstrap/dist/css"</span><span class="p">]</span>
<span class="p">});</span>
</code></pre> <p>Load paths are also loaded from the <code>SASS_PATH</code> <a href="https://en.wikipedia.org/wiki/Environment_variable">environment variable</a>,&nbsp;if it&rsquo;s set. This variable should be a list of paths separated by <code>;</code> (on&nbsp;Windows) or <code>:</code> (on other operating systems). Load paths from the <code>includePaths</code>&nbsp;option take precedence over load paths from&nbsp;<code>SASS_PATH</code>.</p> <pre class="highlight plaintext"><code>$ SASS_PATH=node_modules/bootstrap/dist/css sass style.scss style.css
</code></pre> <h3 id=output> <a class=anchor href="#output"><span class=visuallyhidden>Output permalink</span></a>Output</h3> <p>These options control how Sass produces output&nbsp;files.</p> <h4 id=outputstyle> <a class=anchor href="#outputstyle"><span class=visuallyhidden>outputStyle permalink</span></a><code>outputStyle</code> </h4> <p>This string option controls the output style of the resulting <span class=caps>CSS.</span> There&nbsp;are four possible output&nbsp;styles:</p> <ul> <li><code>&quot;expanded&quot;</code> (the default for Dart Sass) writes each selector and&nbsp;declaration on its own&nbsp;line.</li> <li><code>&quot;compressed&quot;</code> removes as many extra characters as possible, and writes&nbsp;the entire stylesheet on a single&nbsp;line.</li> <li><code>&quot;nested&quot;</code> (the default for Node Sass, not supported by Dart Sass) indents&nbsp;<span class=caps>CSS</span> rules to match the nesting of the Sass&nbsp;source.</li> <li><code>compact</code> (not supported by Dart Sass) puts each <span class=caps>CSS</span> rule on its own&nbsp;single line.</li> </ul> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">source</span> <span class="o">=</span> <span class="err">`</span>
<span class="nx">h1</span> <span class="p">{</span>
  <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="err">:</span> <span class="mi">40</span><span class="nx">px</span><span class="p">;</span>
  <span class="nx">code</span> <span class="p">{</span>
    <span class="nx">font</span><span class="o">-</span><span class="nx">face</span><span class="err">:</span> <span class="nx">Roboto</span> <span class="nx">Mono</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span><span class="err">`</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">data</span><span class="p">:</span> <span class="nx">source</span><span class="p">,</span>
  <span class="na">outputStyle</span><span class="p">:</span> <span class="s2">"expanded"</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="c1">// h1 {</span>
<span class="c1">//   font-size: 40px;</span>
<span class="c1">// }</span>
<span class="c1">// h1 code {</span>
<span class="c1">//   font-face: Roboto Mono;</span>
<span class="c1">// }</span>

<span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">data</span><span class="p">:</span> <span class="nx">source</span><span class="p">,</span>
  <span class="na">outputStyle</span><span class="p">:</span> <span class="s2">"compressed"</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="c1">// h1{font-size:40px}h1 code{font-face:Roboto Mono}</span>

<span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">data</span><span class="p">:</span> <span class="nx">source</span><span class="p">,</span>
  <span class="na">outputStyle</span><span class="p">:</span> <span class="s2">"nested"</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="c1">// h1 {</span>
<span class="c1">//   font-size: 40px; }</span>
<span class="c1">//   h1 code {</span>
<span class="c1">//     font-face: Roboto Mono; }</span>

<span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">data</span><span class="p">:</span> <span class="nx">source</span><span class="p">,</span>
  <span class="na">outputStyle</span><span class="p">:</span> <span class="s2">"compact"</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="c1">// h1 { font-size: 40px; }</span>
<span class="c1">// h1 code { font-face: Roboto Mono; }</span>
</code></pre> <h4 id=precision> <a class=anchor href="#precision"><span class=visuallyhidden>precision permalink</span></a><code>precision</code> </h4> <dl class="impl-status sl-c-description-list sl-c-description-list--horizontal"><div class=compatibility>Compatibility:</div> <div><dt>Dart&nbsp;Sass</dt> <dd>✗</dd> </div> <div><dt>Node&nbsp;Sass</dt> <dd>✓</dd> </div> <div><a>▶</a></div> </dl> <div class="sl-c-callout sl-c-callout--impl-status"><p>For performance reasons, Dart Sass doesn&rsquo;t allow its precision to be customized. It always supports 10 digits of numeric&nbsp;precision.</p></div> <p>This integer option determines the <a href="values/numbers#precision">precision</a> that will be used&nbsp;when generating <span class=caps>CSS</span> that includes numbers. It defaults to 5 for Node&nbsp;Sass.</p> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">data</span><span class="p">:</span> <span class="err">`</span>
<span class="nx">h1</span> <span class="p">{</span>
  <span class="nx">font</span><span class="o">-</span><span class="na">size</span><span class="p">:</span> <span class="p">(</span><span class="mi">100</span><span class="nx">px</span> <span class="o">/</span> <span class="mi">3</span><span class="p">);</span>
<span class="p">}</span><span class="err">`</span><span class="p">,</span>
  <span class="na">precision</span><span class="p">:</span> <span class="mi">20</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="c1">// h1 {</span>
<span class="c1">//  font-size: 33.333333333333336px; }</span>
</code></pre> <h4 id=indenttype> <a class=anchor href="#indenttype"><span class=visuallyhidden>indentType permalink</span></a><code>indentType</code> </h4> <dl class="impl-status sl-c-description-list sl-c-description-list--horizontal"><div class=compatibility>Compatibility:</div> <div><dt>Dart&nbsp;Sass</dt> <dd>✓</dd> </div> <div><dt>Node&nbsp;Sass</dt> <dd>since&nbsp;<span class=caps>3.0.0</span></dd> </div> </dl> <p>This string option determines whether the generated <span class=caps>CSS</span> should use spaces&nbsp;(with the value <code>&quot;space&quot;</code>) or tabs (with the value <code>&quot;tab&quot;</code>) for indentation.&nbsp;It defaults to&nbsp;<code>&quot;space&quot;</code>.</p> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">indentType</span><span class="p">:</span> <span class="s2">"tab"</span><span class="p">,</span>
  <span class="na">indentWidth</span><span class="p">:</span> <span class="mi">1</span>
<span class="p">});</span>

<span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
<span class="c1">// "h1 {\n\tfont-size: 40px;\n}\n"</span>
</code></pre> <h4 id=indentwidth> <a class=anchor href="#indentwidth"><span class=visuallyhidden>indentWidth permalink</span></a><code>indentWidth</code> </h4> <dl class="impl-status sl-c-description-list sl-c-description-list--horizontal"><div class=compatibility>Compatibility:</div> <div><dt>Dart&nbsp;Sass</dt> <dd>✓</dd> </div> <div><dt>Node&nbsp;Sass</dt> <dd>since&nbsp;<span class=caps>3.0.0</span></dd> </div> </dl> <p>This integer option controls how many spaces or tabs (depending on&nbsp;the <a href="#indenttype"><code>indentType</code> option</a>) should be used per indentation level in the&nbsp;generated <span class=caps>CSS.</span> It defaults to 2, and must be between 0 and 10&nbsp;(inclusive).</p> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">indentWidth</span><span class="p">:</span> <span class="mi">4</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="c1">// h1 {</span>
<span class="c1">//    font-size: 40px;</span>
<span class="c1">// }</span>
</code></pre> <h4 id=linefeed> <a class=anchor href="#linefeed"><span class=visuallyhidden>linefeed permalink</span></a><code>linefeed</code> </h4> <dl class="impl-status sl-c-description-list sl-c-description-list--horizontal"><div class=compatibility>Compatibility:</div> <div><dt>Dart&nbsp;Sass</dt> <dd>✓</dd> </div> <div><dt>Node&nbsp;Sass</dt> <dd>since&nbsp;<span class=caps>3.0.0</span></dd> </div> </dl> <p>This string option controls what character sequence is used at the end of&nbsp;each line in the generated <span class=caps>CSS.</span> It can have the following&nbsp;values:</p> <ul> <li><code>lf</code> (the default) uses U+<span class=caps>000A</span> <span class=caps>LINE</span>&nbsp;<span class=caps>FEED.</span></li> <li><code>lfcr</code> uses U+<span class=caps>000A</span> <span class=caps>LINE</span> <span class=caps>FEED</span> followed by U+<span class=caps>000D</span> <span class=caps>CARRIAGE</span>&nbsp;<span class=caps>RETURN.</span></li> <li><code>cr</code> (the default) uses U+<span class=caps>000D</span> <span class=caps>CARRIAGE</span>&nbsp;<span class=caps>RETURN.</span></li> <li><code>crlf</code> uses U+<span class=caps>000D</span> <span class=caps>CARRIAGE</span> <span class=caps>RETURN</span> followed by U+<span class=caps>000A</span> <span class=caps>LINE</span>&nbsp;<span class=caps>FEED.</span></li> </ul> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">linefeed</span><span class="p">:</span> <span class="s2">"crlf"</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="c1">// "h1 {\r\n  font-size: 40px;\r\n}\r\n"</span>
</code></pre> <h4 id=sourcecomments> <a class=anchor href="#sourcecomments"><span class=visuallyhidden>sourceComments permalink</span></a><code>sourceComments</code> </h4> <dl class="impl-status sl-c-description-list sl-c-description-list--horizontal"><div class=compatibility>Compatibility:</div> <div><dt>Dart&nbsp;Sass</dt> <dd>✗</dd> </div> <div><dt>Node&nbsp;Sass</dt> <dd>✓</dd> </div> <div><a>▶</a></div> </dl> <div class="sl-c-callout sl-c-callout--impl-status"><p>This option isn&rsquo;t supported by Dart Sass, because source maps are recommended as the best way of determining where a style rule is&nbsp;defined.</p></div> <p>This flag causes Sass to emit comments for every style rule that indicate&nbsp;where each style rule was defined in the source stylesheet. It defaults to&nbsp;<code>false</code>.</p> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">sourceComments</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="c1">// /* line 1, style.scss */</span>
<span class="c1">// h1 {</span>
<span class="c1">//   font-size: 40px;</span>
<span class="c1">// }</span>
</code></pre> <h3 id=source-maps> <a class=anchor href="#source-maps"><span class=visuallyhidden>Source Maps permalink</span></a>Source&nbsp;Maps</h3> <p>Source maps are files that tell browsers or other tools that consume <span class=caps>CSS</span>&nbsp;how that <span class=caps>CSS</span> corresponds to the Sass files from which it was generated. They make&nbsp;it possible to see and even edit your Sass files in browsers. See instructions&nbsp;for using source maps in <a href="https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps">Chrome</a> and <a href="https://developer.mozilla.org/en-US/docs/Tools/Style_Editor#Source_map_support">Firefox</a>.</p> <p>The Sass <span class=caps>JS</span> <span class=caps>API</span> makes source maps available using the <a href="#result-map"><code>result.map</code> field</a>.</p> <h4 id=sourcemap> <a class=anchor href="#sourcemap"><span class=visuallyhidden>sourceMap permalink</span></a><code>sourceMap</code> </h4> <p>This flag controls whether source maps are&nbsp;generated.</p> <p>If this option is a string, it&rsquo;s the path that the source map is expected to&nbsp;be written to, which is used to link to the source map from the generated <span class=caps>CSS</span>&nbsp;and to link <em>from</em> the source map to the Sass source files. Note that if&nbsp;the <code>sourceMap</code> option is a string and the <a href="#outfile"><code>outFile</code> option</a> isn&rsquo;t passed,&nbsp;Sass assumes that the <span class=caps>CSS</span> will be written to the same directory as the <a href="#file"><code>file</code> option</a> if it&rsquo;s&nbsp;passed.</p> <p>If this option is <code>true</code>, the path is assumed to be the <code>outFile</code> option&nbsp;with <code>.map</code> added to the end. If it&rsquo;s <code>true</code> and the <code>outFile</code> option isn&rsquo;t&nbsp;passed, it has no&nbsp;effect.</p> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">sourceMap</span><span class="p">:</span> <span class="s2">"out.map"</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="c1">// h1 {</span>
<span class="c1">//   font-size: 40px;</span>
<span class="c1">// }</span>
<span class="c1">// /*# sourceMappingURL=out.map */</span>

<span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">sourceMap</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">outFile</span><span class="p">:</span> <span class="s2">"out.css"</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="c1">// h1 {</span>
<span class="c1">//   font-size: 40px;</span>
<span class="c1">// }</span>
<span class="c1">// /*# sourceMappingURL=out.css.map */</span>
</code></pre> <h4 id=outfile> <a class=anchor href="#outfile"><span class=visuallyhidden>outFile permalink</span></a><code>outFile</code> </h4> <p>This string option is the location that Sass expects the generated <span class=caps>CSS</span> to&nbsp;be saved to. It&rsquo;s used to determine the <span class=caps>URL</span> used to link from the generated <span class=caps>CSS</span>&nbsp;to the source map, and <em>from</em> the source map to the Sass source&nbsp;files.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>Despite the name, Sass does <em>not</em> write the <span class=caps>CSS</span> output to this file. The caller must do that&nbsp;themselves.</p> </div> <pre class="highlight javascript"><code><span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">sourceMap</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">outFile</span><span class="p">:</span> <span class="s2">"out.css"</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="c1">// h1 {</span>
<span class="c1">//   font-size: 40px;</span>
<span class="c1">// }</span>
<span class="c1">// /*# sourceMappingURL=out.css.map */</span>
</code></pre> <h4 id=omitsourcemapurl> <a class=anchor href="#omitsourcemapurl"><span class=visuallyhidden>omitSourceMapUrl permalink</span></a><code>omitSourceMapUrl</code> </h4> <p>This flag causes Sass not to link from the generated <span class=caps>CSS</span> to the source&nbsp;map.</p> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">sourceMap</span><span class="p">:</span> <span class="s2">"out.map"</span><span class="p">,</span>
  <span class="na">omitSourceMapUrl</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="c1">// h1 {</span>
<span class="c1">//   font-size: 40px;</span>
<span class="c1">// }</span>
</code></pre> <h4 id=sourcemapcontents> <a class=anchor href="#sourcemapcontents"><span class=visuallyhidden>sourceMapContents permalink</span></a><code>sourceMapContents</code> </h4> <p>This flag tells Sass to embed the entire contents of the Sass files&nbsp;that contributed to the generated <span class=caps>CSS</span> in the source map. This may produce very&nbsp;large source maps, but it guarantees that the source will be available on any&nbsp;computer no matter how the <span class=caps>CSS</span> is&nbsp;served.</p> <pre class="highlight javascript"><code><span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">sourceMap</span><span class="p">:</span> <span class="s2">"out.map"</span><span class="p">,</span>
  <span class="na">sourceMapContents</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">})</span>
</code></pre> <h4 id=sourcemapembed> <a class=anchor href="#sourcemapembed"><span class=visuallyhidden>sourceMapEmbed permalink</span></a><code>sourceMapEmbed</code> </h4> <p>This flag tells Sass to embed the contents of the source map file in&nbsp;the generated <span class=caps>CSS</span>, rather than creating a separate file and linking to it from&nbsp;the <span class=caps>CSS.</span></p> <pre class="highlight javascript"><code><span class="nx">sass</span><span class="p">.</span><span class="nx">renderSync</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">sourceMap</span><span class="p">:</span> <span class="s2">"out.map"</span><span class="p">,</span>
  <span class="na">embedSourceMap</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">})</span>
</code></pre> <h4 id=sourcemaproot> <a class=anchor href="#sourcemaproot"><span class=visuallyhidden>sourceMapRoot permalink</span></a><code>sourceMapRoot</code> </h4> <p>This string option is prepended to all the links from the source map to the&nbsp;Sass source&nbsp;files.</p> <h3 id=plugins> <a class=anchor href="#plugins"><span class=visuallyhidden>Plugins permalink</span></a>Plugins</h3> <p>These options use JavaScript callbacks to expand the functionality of&nbsp;Sass compilation.</p> <h4 id=fiber> <a class=anchor href="#fiber"><span class=visuallyhidden>fiber permalink</span></a><code>fiber</code> </h4> <p>When using Dart Sass, <strong><code>renderSync()</code> is more than twice as fast&nbsp;as <code>render()</code></strong>, due to the overhead of asynchronous callbacks. To avoid&nbsp;this performance hit, <code>render()</code> can use the <a href="https://www.npmjs.com/package/fibers"><code>fibers</code></a> package to&nbsp;call asynchronous importers from the synchronous code path. To enable this, pass&nbsp;the <code>Fiber</code> class to the <code>fiber</code>&nbsp;option:</p> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">sass</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"sass"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">Fiber</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"fibers"</span><span class="p">);</span>

<span class="nx">sass</span><span class="p">.</span><span class="nx">render</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"input.scss"</span><span class="p">,</span>
  <span class="na">importer</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">prev</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">},</span>
  <span class="na">fiber</span><span class="p">:</span> <span class="nx">Fiber</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">});</span>
</code></pre> <p>This option is allowed, but will have no effect, when using Node Sass or&nbsp;when using the <code>renderSync()</code>&nbsp;function.</p> <h4 id=functions> <a class=anchor href="#functions"><span class=visuallyhidden>functions permalink</span></a><code>functions</code> </h4> <p>This option defines additional built-in Sass functions that are available in&nbsp;all stylesheets. It&rsquo;s an object whose keys are Sass function signatures and&nbsp;whose values are JavaScript functions. Each function should take the same arguments&nbsp;as its signature. If the signature takes <a href="at-rules/function#taking-arbitrary-arguments">arbitrary arguments</a>, the&nbsp;JavaScript function should take a single&nbsp;argument.</p> <p>Functions are passed JavaScript representations of <a href="#value-types">Sass value types</a>,&nbsp;and must return the same. All functions can return synchronously, but&nbsp;functions passed to the asynchronous <a href="#render"><code>render()</code> function</a> can also take an&nbsp;additional callback to which they can asynchronously pass the result of the function&nbsp;when it&rsquo;s&nbsp;complete.</p> <p>If a function synchronously throws an error, that error is reported to&nbsp;the caller of the function and stylesheet compilation fails. There&rsquo;s currently&nbsp;no way to asynchronously report an&nbsp;error.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>When writing custom functions, it&rsquo;s important to ensure that all the arguments are the types you expect. Otherwise, users&rsquo; stylesheets could crash in hard-to-debug ways or, worse, compile to meaningless&nbsp;<span class=caps>CSS.</span></p> </div> <pre class="highlight javascript"><code><span class="nx">sass</span><span class="p">.</span><span class="nx">render</span><span class="p">({</span>
  <span class="na">data</span><span class="p">:</span> <span class="err">`</span>
<span class="nx">h1</span> <span class="p">{</span>
  <span class="nx">font</span><span class="o">-</span><span class="na">size</span><span class="p">:</span> <span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1</span><span class="nx">px</span><span class="p">;</span>
<span class="p">}</span><span class="err">`</span><span class="p">,</span>
  <span class="na">functions</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// This function uses the synchronous API, and can be passed to either</span>
    <span class="c1">// renderSync() or render().</span>
    <span class="s1">'pow($base, $exponent)'</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">base</span><span class="p">,</span> <span class="nx">exponent</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">base</span> <span class="k">instanceof</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="s2">"$base: Expected a number."</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">base</span><span class="p">.</span><span class="nx">getUnit</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="s2">"$base: Expected a unitless number."</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">exponent</span> <span class="k">instanceof</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="s2">"$exponent: Expected a number."</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">exponent</span><span class="p">.</span><span class="nx">getUnit</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="s2">"$exponent: Expected a unitless number."</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">return</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span>
          <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">base</span><span class="p">.</span><span class="nx">getValue</span><span class="p">(),</span> <span class="nx">exponent</span><span class="p">.</span><span class="nx">getValue</span><span class="p">()));</span>
    <span class="p">},</span>

    <span class="c1">// This function uses the asynchronous API, and can only be passed to</span>
    <span class="c1">// render().</span>
    <span class="s1">'sqrt($number)'</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">number</span> <span class="k">instanceof</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="s2">"$number: Expected a number."</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">number</span><span class="p">.</span><span class="nx">getUnit</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="s2">"$number: Expected a unitless number."</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="nx">done</span><span class="p">(</span><span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">number</span><span class="p">.</span><span class="nx">getValue</span><span class="p">())));</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">css</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
  <span class="c1">// h1 {</span>
  <span class="c1">//   font-size: 32px;</span>
  <span class="c1">// }</span>
<span class="p">});</span>
</code></pre> <h4 id=importer> <a class=anchor href="#importer"><span class=visuallyhidden>importer permalink</span></a><code>importer</code> </h4> <dl class="impl-status sl-c-description-list sl-c-description-list--horizontal"><div class=compatibility>Compatibility:</div> <div><dt>Dart&nbsp;Sass</dt> <dd>✓</dd> </div> <div><dt>Node&nbsp;Sass</dt> <dd>since&nbsp;<span class=caps>3.0.0</span></dd> </div> <div><a>▶</a></div> </dl> <div class="sl-c-callout sl-c-callout--impl-status"><p>Versions of Node Sass before <span class=caps>3.0.0</span> don&rsquo;t support arrays of importers, nor do they support importers that return <code>Error</code>&nbsp;objects.</p> <p>Versions of Node Sass before <span class=caps>2.0.0</span> don&rsquo;t support the <code>importer</code> option at&nbsp;all.</p></div> <dl class="impl-status sl-c-description-list sl-c-description-list--horizontal"><div class=compatibility>Compatibility (Import order):</div> <div><dt>Dart&nbsp;Sass</dt> <dd>since&nbsp;<span class=caps>1.20.2</span></dd> </div> <div><dt>Node&nbsp;Sass</dt> <dd>✗</dd> </div> <div><a>▶</a></div> </dl> <div class="sl-c-callout sl-c-callout--impl-status"><p>Versions of Dart Sass before <span class=caps>1.20.2</span> preferred resolving imports using load paths (<a href="#includepaths">includePaths</a>) before resolving them using custom&nbsp;importers.</p> <p>All versions of Node Sass currently pass imports to importers before loading them relative to the file in which the <code>@import</code> appears. This behavior is considered incorrect and should not be relied on because it violates the principle of <em>locality</em>, which says that it should be possible to reason about a stylesheet without knowing everything about how the entire system is set up. If a user tries to import a stylesheet relative to another stylesheet, that import should <em>always</em> work. It shouldn&rsquo;t be possible for some configuration somewhere else to break&nbsp;it.</p></div> <p>This option defines one or more additional handlers for loading files when&nbsp;a <a href="at-rules/use"><code>@use</code> rule</a> or an <a href="at-rules/import"><code>@import</code> rule</a> is encountered. It can either be a&nbsp;single JavaScript function, or an array of functions. These functions are always&nbsp;passed two&nbsp;arguments:</p> <ol> <li>The <code>@use</code> or <code>@import</code> rule&rsquo;s <span class=caps>URL</span> as a string, exactly as it appears in&nbsp;the stylesheet.</li> <li>A string identifying for the stylesheet that contained the <code>@use</code>&nbsp;or <code>@import</code>. This identifier&rsquo;s format depends on how that stylesheet&nbsp;was loaded: <ul> <li>If the stylesheet was loaded from the filesystem, it&rsquo;s the absolute path&nbsp;of its&nbsp;file.</li> <li>If the stylesheet was loaded from an importer that returned its&nbsp;contents, it&rsquo;s the <span class=caps>URL</span> of the <code>@use</code> or <code>@import</code> rule that loaded&nbsp;it.</li> <li>If the stylesheet came from the <a href="#data"><code>data</code> option</a>, it&rsquo;s the&nbsp;string <code>&quot;stdin&quot;</code>.</li> </ul></li> </ol> <p>Importers must return one of the following&nbsp;types:</p> <ul> <li>An object with the key <code>contents</code> whose value is the contents of a&nbsp;stylesheet (in <span class=caps>SCSS</span> syntax). This causes Sass to load that stylesheet&rsquo;s&nbsp;contents.</li> <li>An object with the key <code>file</code> whose value is a path on disk. This causes&nbsp;Sass to load that file as though it had been imported&nbsp;directly.</li> <li><code>null</code>, which indicates that it doesn&rsquo;t recognize the <span class=caps>URL</span> and another&nbsp;importer should be tried&nbsp;instead.</li> <li>An <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"><code>Error</code> object</a>, indicating that importing&nbsp;failed.</li> </ul> <p>All importers can return synchronously, but importers passed to the&nbsp;asynchronous <a href="#render"><code>render()</code> function</a> can also take an additional callback to which they&nbsp;can asynchronously pass the result of the import once it&rsquo;s&nbsp;complete.</p> <p>Imports are resolved by trying, in&nbsp;order:</p> <ul> <li><p>Loading a file relative to the file in which the <code>@use</code> or <code>@import</code>&nbsp;appeared.</p></li> <li><p>Each custom&nbsp;importer.</p></li> <li><p>Loading a file relative to the current working&nbsp;directory.</p></li> <li><p>Each load path in <a href="#includepaths">includePaths</a></p></li> <li><p>Each load path specified in the <code>SASS_PATH</code> environment variable,&nbsp;which should be semicolon-separated on Windows and colon-separated&nbsp;elsewhere.</p></li> </ul> <pre class="highlight javascript"><code><span class="nx">sass</span><span class="p">.</span><span class="nx">render</span><span class="p">({</span>
  <span class="na">file</span><span class="p">:</span> <span class="s2">"style.scss"</span><span class="p">,</span>
  <span class="na">importer</span><span class="p">:</span> <span class="p">[</span>
    <span class="c1">// This importer uses the synchronous API, and can be passed to either</span>
    <span class="c1">// renderSync() or render().</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">prev</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// This generates a stylesheet from scratch for `@use "big-headers"`.</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">url</span> <span class="o">!=</span> <span class="s2">"big-headers"</span><span class="p">)</span> <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>

      <span class="k">return</span> <span class="p">{</span>
        <span class="na">contents</span><span class="p">:</span> <span class="err">`</span>
<span class="nx">h1</span> <span class="p">{</span>
  <span class="nx">font</span><span class="o">-</span><span class="na">size</span><span class="p">:</span> <span class="mi">40</span><span class="nx">px</span><span class="p">;</span>
<span class="p">}</span><span class="err">`</span>
      <span class="p">};</span>
    <span class="p">},</span>

    <span class="c1">// This importer uses the asynchronous API, and can only be passed to</span>
    <span class="c1">// render().</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">prev</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Convert `@use "foo/bar"` to "node_modules/foo/sass/bar".</span>
      <span class="kd">var</span> <span class="nx">components</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">'/'</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">innerPath</span> <span class="o">=</span> <span class="nx">components</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">'/'</span><span class="p">);</span>
      <span class="nx">done</span><span class="p">({</span>
        <span class="na">file</span><span class="p">:</span> <span class="err">`</span><span class="nx">node_modules</span><span class="o">/</span><span class="nx">$</span><span class="p">{</span><span class="nx">components</span><span class="p">.</span><span class="nx">first</span><span class="p">}</span><span class="sr">/sass/</span><span class="nx">$</span><span class="p">{</span><span class="nx">innerPath</span><span class="p">}</span><span class="err">`</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">});</span>
</code></pre> <h2 id=value-types> <a class=anchor href="#value-types"><span class=visuallyhidden>Value Types permalink</span></a>Value&nbsp;Types</h2> <p>In order to support <a href="#functions">custom functions</a>, Sass provides access to&nbsp;JavaScript wrappers for its various <a href=values>value types</a>. These are all provided under&nbsp;the <code>types</code> namespace in the main Sass&nbsp;module.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>All value types support methods that modify the value objects. Users are strongly discouraged from using these methods (except for the <a href="#types-map"><code>Map</code> type</a> and <a href="#types-list"><code>List</code> type</a> where they&rsquo;re necessary to create new values), because they don&rsquo;t match the general principle that Sass values are immutable. Users should construct new objects rather than modifying existing&nbsp;ones.</p> </div> <h3 id=types-number> <a class=anchor href="#types-number"><span class=visuallyhidden>types.Number permalink</span></a><code>types.Number</code> </h3> <p>This class represents a <a href="values/numbers">Sass number</a>.</p> <h4 id=new-types-number-value-unit-39-39> <a class=anchor href="#new-types-number-value-unit-39-39"><span class=visuallyhidden>new types.Number(value[, unit = &#8221;]) permalink</span></a><code>new types.Number(value[, unit = ''])</code> </h4> <p>Creates a new Sass number with the given numeric value and string&nbsp;unit. <a href="values/numbers#units">Complex units</a> are parsed from the unit string: numerator units are&nbsp;separated from denominators by a <code>/</code>. Multiple numerator and/or denominator units may&nbsp;be separated by&nbsp;<code>*</code>.</p> <pre class="highlight javascript"><code><span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mf">0.5</span><span class="p">);</span> <span class="c1">// == 0.5</span>
<span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s2">"px"</span><span class="p">);</span> <span class="c1">// == 10px</span>
<span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s2">"px*px"</span><span class="p">);</span> <span class="c1">// == 10px * 1px</span>
<span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s2">"px/s"</span><span class="p">);</span> <span class="c1">// == 10px / 1s</span>
<span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s2">"px*px/s*s"</span><span class="p">);</span> <span class="c1">// == 10px * 1px / 1s / 1s</span>
</code></pre> <h4 id=number-getvalue> <a class=anchor href="#number-getvalue"><span class=visuallyhidden>number.getValue() permalink</span></a><code>number.getValue()</code> </h4> <p>Returns the value of the number, ignoring&nbsp;units.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>This means that <code>96px</code> and <code>1in</code> will return different values, even though they represent the same&nbsp;length.</p> </div> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">number</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s2">"px"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">.</span><span class="nx">getValue</span><span class="p">());</span> <span class="c1">// 10</span>
</code></pre> <h4 id=number-getunit> <a class=anchor href="#number-getunit"><span class=visuallyhidden>number.getUnit() permalink</span></a><code>number.getUnit()</code> </h4> <p>Returns the units of the number as a string. Complex units are returned in&nbsp;the same format that <a href="#new-types-number-value-unit-39-39">the constructor</a> accepts&nbsp;them.</p> <pre class="highlight javascript"><code><span class="c1">// number is `10px`.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">.</span><span class="nx">getUnit</span><span class="p">());</span> <span class="c1">// "px"</span>

<span class="c1">// number is `10px / 1s`.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">.</span><span class="nx">getUnit</span><span class="p">());</span> <span class="c1">// "px/s"</span>
</code></pre> <h4 id=number-setvalue-value> <a class=anchor href="#number-setvalue-value"><span class=visuallyhidden>number.setValue(value) permalink</span></a><code>number.setValue(value)</code> </h4> <p>Sets the value of the number, independent of its&nbsp;units.</p> <h4 id=number-setunit-unit> <a class=anchor href="#number-setunit-unit"><span class=visuallyhidden>number.setUnit(unit) permalink</span></a><code>number.setUnit(unit)</code> </h4> <p>Sets the units of the number, independent of its numeric value. Complex&nbsp;units are specified in the same format as for <a href="#new-types-number-value-unit-39-39">the constructor</a>.</p> <h3 id=types-string> <a class=anchor href="#types-string"><span class=visuallyhidden>types.String permalink</span></a><code>types.String</code> </h3> <p>This class represents a <a href="values/strings">Sass string</a>.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>This <span class=caps>API</span> currently provides no way of distinguishing between a <a href="values/strings#quoted">quoted</a> and <a href="values/strings#unquoted">unquoted</a>&nbsp;string.</p> </div> <h4 id=new-types-string-value> <a class=anchor href="#new-types-string-value"><span class=visuallyhidden>new types.String(value) permalink</span></a><code>new types.String(value)</code> </h4> <p>Creates a new unquoted Sass string with the given&nbsp;value.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>This <span class=caps>API</span> currently provides no way of creating a <a href="values/strings#quoted">quoted</a>&nbsp;string.</p> </div> <pre class="highlight javascript"><code><span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">String</span><span class="p">(</span><span class="s2">"Arial"</span><span class="p">);</span> <span class="c1">// == Arial</span>
</code></pre> <h4 id=string-getvalue> <a class=anchor href="#string-getvalue"><span class=visuallyhidden>string.getValue() permalink</span></a><code>string.getValue()</code> </h4> <p>Returns the contents of the string. If the string contains escapes,&nbsp;those escapes are included literally if it&rsquo;s <a href="values/strings#unquoted">unquoted</a>, while the values of&nbsp;the escapes are included if it&rsquo;s <a href="values/strings#quoted">quoted</a>.</p> <pre class="highlight javascript"><code><span class="c1">// string is `Arial`.</span>
<span class="nx">string</span><span class="p">.</span><span class="nx">getValue</span><span class="p">();</span> <span class="c1">// "Arial"</span>

<span class="c1">// string is `"Helvetica Neue"`.</span>
<span class="nx">string</span><span class="p">.</span><span class="nx">getValue</span><span class="p">();</span> <span class="c1">// "Helvetica Neue"</span>

<span class="c1">// string is `\1F46D`.</span>
<span class="nx">string</span><span class="p">.</span><span class="nx">getValue</span><span class="p">();</span> <span class="c1">// "\\1F46D"</span>

<span class="c1">// string is `"\1F46D"`.</span>
<span class="nx">string</span><span class="p">.</span><span class="nx">getValue</span><span class="p">();</span> <span class="c1">// "👭"</span>
</code></pre> <h4 id=string-setvalue-value> <a class=anchor href="#string-setvalue-value"><span class=visuallyhidden>string.setValue(value) permalink</span></a><code>string.setValue(value)</code> </h4> <p>Sets the contents of the&nbsp;string.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>Even if the string was originally quoted, this will cause it to become&nbsp;unquoted.</p> </div> <h3 id=types-color> <a class=anchor href="#types-color"><span class=visuallyhidden>types.Color permalink</span></a><code>types.Color</code> </h3> <p>This class represents a <a href="values/colors">Sass color</a>.</p> <h4 id=new-types-color-red-green-blue-alpha-1> <a class=anchor href="#new-types-color-red-green-blue-alpha-1"><span class=visuallyhidden>new types.Color(red, green, blue[, alpha = 1]) permalink</span></a><code>new types.Color(red, green, blue[, alpha = 1])</code> </h4> <p>Creates a new Sass color with the given red, green, blue, and alpha&nbsp;channels. The red, green, and blue channels must be integers between 0 and&nbsp;255 (inclusive), and alpha must be between 0 and 1&nbsp;(inclusive).</p> <pre class="highlight javascript"><code><span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">107</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">127</span><span class="p">);</span> <span class="c1">// #6b717f</span>
<span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// rgba(0, 0, 0, 0)</span>
</code></pre> <h4 id=new-types-color-argb> <a class=anchor href="#new-types-color-argb"><span class=visuallyhidden>new types.Color(argb) permalink</span></a><code>new types.Color(argb)</code> </h4> <p>Creates a new Sass color with alpha, red, green, and blue channels taken&nbsp;from respective two-byte chunks of a hexidecimal&nbsp;number.</p> <pre class="highlight javascript"><code><span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mh">0xff6b717f</span><span class="p">);</span> <span class="c1">// #6b717f</span>
<span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mh">0x00000000</span><span class="p">);</span> <span class="c1">// rgba(0, 0, 0, 0)</span>
</code></pre> <h4 id=color-getr> <a class=anchor href="#color-getr"><span class=visuallyhidden>color.getR() permalink</span></a><code>color.getR()</code> </h4> <p>Returns the red channel of the color as an integer from 0 to&nbsp;255.</p> <pre class="highlight javascript"><code><span class="c1">// color is `#6b717f`.</span>
<span class="nx">color</span><span class="p">.</span><span class="nx">getR</span><span class="p">();</span> <span class="c1">// 107</span>

<span class="c1">// color is `#b37399`.</span>
<span class="nx">color</span><span class="p">.</span><span class="nx">getR</span><span class="p">();</span> <span class="c1">// 179</span>
</code></pre> <h4 id=color-getg> <a class=anchor href="#color-getg"><span class=visuallyhidden>color.getG() permalink</span></a><code>color.getG()</code> </h4> <p>Returns the green channel of the color as an integer from 0 to&nbsp;255.</p> <pre class="highlight javascript"><code><span class="c1">// color is `#6b717f`.</span>
<span class="nx">color</span><span class="p">.</span><span class="nx">getG</span><span class="p">();</span> <span class="c1">// 113</span>

<span class="c1">// color is `#b37399`.</span>
<span class="nx">color</span><span class="p">.</span><span class="nx">getG</span><span class="p">();</span> <span class="c1">// 115</span>
</code></pre> <h4 id=color-getb> <a class=anchor href="#color-getb"><span class=visuallyhidden>color.getB() permalink</span></a><code>color.getB()</code> </h4> <p>Returns the blue channel of the color as an integer from 0 to&nbsp;255.</p> <pre class="highlight javascript"><code><span class="c1">// color is `#6b717f`.</span>
<span class="nx">color</span><span class="p">.</span><span class="nx">getG</span><span class="p">();</span> <span class="c1">// 127</span>

<span class="c1">// color is `#b37399`.</span>
<span class="nx">color</span><span class="p">.</span><span class="nx">getG</span><span class="p">();</span> <span class="c1">// 153</span>
</code></pre> <h4 id=color-geta> <a class=anchor href="#color-geta"><span class=visuallyhidden>color.getA() permalink</span></a><code>color.getA()</code> </h4> <p>Returns the alpha channel of the color as a number from 0 to&nbsp;1.</p> <pre class="highlight javascript"><code><span class="c1">// color is `#6b717f`.</span>
<span class="nx">color</span><span class="p">.</span><span class="nx">getA</span><span class="p">();</span> <span class="c1">// 1</span>

<span class="c1">// color is `transparent`.</span>
<span class="nx">color</span><span class="p">.</span><span class="nx">getA</span><span class="p">();</span> <span class="c1">// 0</span>
</code></pre> <h4 id=color-setr-red> <a class=anchor href="#color-setr-red"><span class=visuallyhidden>color.setR(red) permalink</span></a><code>color.setR(red)</code> </h4> <p>Sets the red channel of the color. The value must be an integer between 0&nbsp;and 255&nbsp;(inclusive).</p> <h4 id=color-setg-green> <a class=anchor href="#color-setg-green"><span class=visuallyhidden>color.setG(green) permalink</span></a><code>color.setG(green)</code> </h4> <p>Sets the green channel of the color. The value must be an integer between 0&nbsp;and 255&nbsp;(inclusive).</p> <h4 id=color-setb-blue> <a class=anchor href="#color-setb-blue"><span class=visuallyhidden>color.setB(blue) permalink</span></a><code>color.setB(blue)</code> </h4> <p>Sets the blue channel of the color. The value must be an integer between 0&nbsp;and 255&nbsp;(inclusive).</p> <h4 id=color-seta-alpha> <a class=anchor href="#color-seta-alpha"><span class=visuallyhidden>color.setA(alpha) permalink</span></a><code>color.setA(alpha)</code> </h4> <p>Sets the alpha channel of the color. The value must be a number between 0 and&nbsp;1 (inclusive).</p> <h3 id=types-boolean> <a class=anchor href="#types-boolean"><span class=visuallyhidden>types.Boolean permalink</span></a><code>types.Boolean</code> </h3> <p>This class represents a <a href="values/booleans">Sass boolean</a>.</p> <p>Custom functions should respect Sass&rsquo;s notion of <a href="at-rules/control/if#truthiness-and-falsiness">truthiness</a> by&nbsp;treating <code>false</code> and <code>null</code> as falsey and everything else as&nbsp;truthy.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>Calling <code>new sass.types.Boolean()</code> is&nbsp;forbidden.</p> </div> <h4 id=types-boolean-true> <a class=anchor href="#types-boolean-true"><span class=visuallyhidden>types.Boolean.<span class=caps>TRUE</span> permalink</span></a><code>types.Boolean.TRUE</code> </h4> <p>The Sass value&nbsp;<code>true</code>.</p> <h4 id=types-boolean-false> <a class=anchor href="#types-boolean-false"><span class=visuallyhidden>types.Boolean.<span class=caps>FALSE</span> permalink</span></a><code>types.Boolean.FALSE</code> </h4> <p>The Sass value&nbsp;<code>false</code>.</p> <h4 id=boolean-getvalue> <a class=anchor href="#boolean-getvalue"><span class=visuallyhidden>boolean.getValue() permalink</span></a><code>boolean.getValue()</code> </h4> <p>Returns <code>true</code> if the boolean is the Sass value <code>true</code>, and false if it&rsquo;s&nbsp;the Sass value&nbsp;<code>false</code>.</p> <pre class="highlight javascript"><code><span class="c1">// boolean is `true`.</span>
<span class="kr">boolean</span><span class="p">.</span><span class="nx">getValue</span><span class="p">();</span> <span class="c1">// true</span>
<span class="kr">boolean</span> <span class="o">===</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Boolean</span><span class="p">.</span><span class="nx">TRUE</span><span class="p">;</span> <span class="c1">// true</span>

<span class="c1">// boolean is `false`.</span>
<span class="kr">boolean</span><span class="p">.</span><span class="nx">getValue</span><span class="p">();</span> <span class="c1">// false</span>
<span class="kr">boolean</span> <span class="o">===</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Boolean</span><span class="p">.</span><span class="nx">FALSE</span><span class="p">;</span> <span class="c1">// true</span>
</code></pre> <h3 id=types-list> <a class=anchor href="#types-list"><span class=visuallyhidden>types.List permalink</span></a><code>types.List</code> </h3> <p>This class represents a <a href="values/lists">Sass list</a>.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>This list type&rsquo;s methods use 0-based indexing, even though within Sass lists use 1-based indexing. These methods also don&rsquo;t support using negative numbers to index backwards from the end of the&nbsp;list.</p> </div> <h4 id=new-types-list-length-comma-true> <a class=anchor href="#new-types-list-length-comma-true"><span class=visuallyhidden>new types.List(length[, comma = true]) permalink</span></a><code>new types.List(length[, comma = true])</code> </h4> <p>Creates a new Sass list with the given number of elements. If <code>comma</code> is&nbsp;true, the list is comma-separated; otherwise, it&rsquo;s&nbsp;space-separated.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>The initial values of the list elements are undefined. These elements must be set using the <a href="#list-setvalue-index-value"><code>setValue()</code> method</a> before accessing them or passing the list back to&nbsp;Sass.</p> </div> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nx">List</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s2">"px"</span><span class="p">));</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="s2">"px"</span><span class="p">));</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="s2">"px"</span><span class="p">));</span>
<span class="nx">list</span><span class="p">;</span> <span class="c1">// 10px, 15px, 32px</span>
</code></pre> <h4 id=list-getvalue-index> <a class=anchor href="#list-getvalue-index"><span class=visuallyhidden>list.getValue(index) permalink</span></a><code>list.getValue(index)</code> </h4> <p>Returns the element at the given (0-based) index in the&nbsp;list.</p> <pre class="highlight javascript"><code><span class="c1">// list is `10px, 15px, 32px`</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">getValue</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// 10px</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">getValue</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// 32px</span>
</code></pre> <h4 id=list-getseparator> <a class=anchor href="#list-getseparator"><span class=visuallyhidden>list.getSeparator() permalink</span></a><code>list.getSeparator()</code> </h4> <p>Returns <code>true</code> if the list is comma-separated, and <code>false</code>&nbsp;otherwise.</p> <pre class="highlight javascript"><code><span class="c1">// list is `10px, 15px, 32px`</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">getSeparator</span><span class="p">();</span> <span class="c1">// true</span>

<span class="c1">// list is `1px solid`</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">getSeparator</span><span class="p">();</span> <span class="c1">// false</span>
</code></pre> <h4 id=list-getlength> <a class=anchor href="#list-getlength"><span class=visuallyhidden>list.getLength() permalink</span></a><code>list.getLength()</code> </h4> <p>Returns the number of elements in the&nbsp;list.</p> <pre class="highlight javascript"><code><span class="c1">// list is `10px, 15px, 32px`</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">getLength</span><span class="p">();</span> <span class="c1">// 3</span>

<span class="c1">// list is `1px solid`</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">getLength</span><span class="p">();</span> <span class="c1">// 2</span>
</code></pre> <h4 id=list-setvalue-index-value> <a class=anchor href="#list-setvalue-index-value"><span class=visuallyhidden>list.setValue(index, value) permalink</span></a><code>list.setValue(index, value)</code> </h4> <p>Sets the element at the given (0-based) index in the list to the given&nbsp;value.</p> <pre class="highlight javascript"><code><span class="c1">// list is `10px, 15px, 32px`</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="s2">"px"</span><span class="p">));</span>
<span class="nx">list</span><span class="p">;</span> <span class="c1">// 10px, 18px, 32px</span>
</code></pre> <h4 id=list-setseparator-comma> <a class=anchor href="#list-setseparator-comma"><span class=visuallyhidden>list.setSeparator(comma) permalink</span></a><code>list.setSeparator(comma)</code> </h4> <p>Sets whether the list is&nbsp;comma-separated.</p> <h3 id=types-map> <a class=anchor href="#types-map"><span class=visuallyhidden>types.Map permalink</span></a><code>types.Map</code> </h3> <p>This class represents a <a href="values/maps">Sass map</a>.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>This map type is represented as a list of key-value pairs rather than a mapping from keys to values. The only way to find the value associated with a given key is to iterate through the map checking for that&nbsp;key.</p> <p>Maps created through this <span class=caps>API</span> are still forbidden from having duplicate&nbsp;keys.</p> </div> <h4 id=new-types-map-length> <a class=anchor href="#new-types-map-length"><span class=visuallyhidden>new types.Map(length) permalink</span></a><code>new types.Map(length)</code> </h4> <p>Creates a new Sass map with the given number of key/value&nbsp;pairs.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>The initial keys and values of the map are undefined. They must be set using the <a href="#map-setkey-index-key"><code>setKey()</code> method</a> and the <a href="#map-setvalue-index-value"><code>setValue()</code> method</a> before accessing them or passing the map back to&nbsp;Sass.</p> </div> <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">setKey</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">String</span><span class="p">(</span><span class="s2">"width"</span><span class="p">));</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="s2">"px"</span><span class="p">));</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">setKey</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">String</span><span class="p">(</span><span class="s2">"height"</span><span class="p">));</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="s2">"px"</span><span class="p">));</span>
<span class="nx">map</span><span class="p">;</span> <span class="c1">// (width: 300px, height: 100px)</span>
</code></pre> <h4 id=map-getkey-index> <a class=anchor href="#map-getkey-index"><span class=visuallyhidden>map.getKey(index) permalink</span></a><code>map.getKey(index)</code> </h4> <p>Returns the key in the key/value pair at the given (0-based) index in the&nbsp;map.</p> <pre class="highlight javascript"><code><span class="c1">// map is `(width: 300px, height: 100px)`</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">getKey</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// width</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">getKey</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// height</span>
</code></pre> <h4 id=map-getvalue-index> <a class=anchor href="#map-getvalue-index"><span class=visuallyhidden>map.getValue(index) permalink</span></a><code>map.getValue(index)</code> </h4> <p>Returns the value in the key/value pair at the given (0-based) index in the&nbsp;map.</p> <pre class="highlight javascript"><code><span class="c1">// map is `(width: 300px, height: 100px)`</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">getValue</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// 300px</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">getValue</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// 100px</span>
</code></pre> <h4 id=map-getlength> <a class=anchor href="#map-getlength"><span class=visuallyhidden>map.getLength() permalink</span></a><code>map.getLength()</code> </h4> <p>Returns the number of key/value pairs in the&nbsp;map.</p> <pre class="highlight javascript"><code><span class="c1">// map is `("light": 200, "medium": 400, "bold": 600)`</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">getLength</span><span class="p">();</span> <span class="c1">// 3</span>

<span class="c1">// map is `(width: 300px, height: 100px)`</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">getLength</span><span class="p">();</span> <span class="c1">// 2</span>
</code></pre> <h4 id=map-setkey-index-key> <a class=anchor href="#map-setkey-index-key"><span class=visuallyhidden>map.setKey(index, key) permalink</span></a><code>map.setKey(index, key)</code> </h4> <p>Sets the key of the key/value pair at the given (0-based) index in the map&nbsp;to the given&nbsp;value.</p> <pre class="highlight javascript"><code><span class="c1">// map is `("light": 200, "medium": 400, "bold": 600)`</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">setKey</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">String</span><span class="p">(</span><span class="s2">"lighter"</span><span class="p">));</span>
<span class="nx">map</span><span class="p">;</span> <span class="c1">// (lighter: 200, "medium": 400, "bold": 600)</span>
</code></pre> <h4 id=map-setvalue-index-value> <a class=anchor href="#map-setvalue-index-value"><span class=visuallyhidden>map.setValue(index, value) permalink</span></a><code>map.setValue(index, value)</code> </h4> <p>Sets the value of the key/value pair at the given (0-based) index in the map&nbsp;to the given&nbsp;value.</p> <pre class="highlight javascript"><code><span class="c1">// map is `("light": 200, "medium": 400, "bold": 600)`</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">setKey</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">new</span> <span class="nx">sass</span><span class="p">.</span><span class="nx">types</span><span class="p">.</span><span class="nb">Number</span><span class="p">(</span><span class="mi">300</span><span class="p">));</span>
<span class="nx">map</span><span class="p">;</span> <span class="c1">// ("light": 200, "medium": 300, "bold": 600)</span>
</code></pre> <h3 id=types-null> <a class=anchor href="#types-null"><span class=visuallyhidden>types.Null permalink</span></a><code>types.Null</code> </h3> <p>This class represents the <a href="values/null">Sass <code>null</code> value</a>.</p> <div class="sl-c-callout sl-c-callout--warning"><h3>⚠️ Heads&nbsp;up!</h3> <p>Calling <code>new sass.types.Null()</code> is&nbsp;forbidden.</p> </div> <h4 id=types-null-null> <a class=anchor href="#types-null-null"><span class=visuallyhidden>types.Null.<span class=caps>NULL</span> permalink</span></a><code>types.Null.NULL</code> </h4> <p>The Sass value&nbsp;<code>null</code>.</p> <h2 id=integrations> <a class=anchor href="#integrations"><span class=visuallyhidden>Integrations permalink</span></a>Integrations</h2> <p>Most popular Node.js build systems have integrations available for the <span class=caps>JS</span>&nbsp;<span class=caps>API</span>:</p> <ul> <li>Webpack uses the <a href="https://www.npmjs.com/package/sass-loader"><code>sass-loader</code> package</a>.</li> <li>Gulp uses the <a href="https://www.npmjs.com/package/gulp-sass"><code>gulp-sass</code> package</a>.</li> <li>Broccoli uses the <a href="https://www.npmjs.com/package/broccoli-sass-source-maps"><code>broccoli-sass-source-maps</code> package</a>.</li> <li>Ember uses the <a href="https://www.npmjs.com/package/ember-cli-sass"><code>ember-cli-sass</code> package</a>.</li> <li>Grunt uses the <a href="https://www.npmjs.com/package/grunt-sass"><code>grunt-sass</code> package</a>.</li> </ul> </div> </div> </div> </div> </div> </div> </div> </div> <div class=sl-c-alert> <div aria-labelledby=release-nav class='sl-l-container sl-c-list-horizontal-wrapper'> <ul class=sl-l-grid--justify-center> <li id=release-nav> Current Releases: </li> <li> <span class=release-name><a href="/dart-sass">Dart Sass</a>&#32;<a href="https://github.com/sass/dart-sass/releases/tag/1.24.4">1.24.4</a></span> </li> <li> <span class=release-name><a href="/libsass">LibSass</a>&#32;<a href="https://github.com/sass/libsass/releases/tag/3.6.3">3.6.3</a></span> </li> <li> <span class=release-name><a href="/ruby-sass">Ruby Sass</a><span aria-label=coffin role=presentation> &#32; ⚰ </span></span> </li> <li class='sl-l-grid__column sl-l-large-grid__column--auto-size'> <a href="/implementation">Implementation Guide</a> </li> </ul> </div> </div> </main> <footer class='site-footer contentinfo' itemscope=itemscope itemtype='http://schema.org/WPFooter' role=contentinfo> <div class='sl-l-container sl-l-section'> <div class='sl-l-grid sl-l-grid--full sl-l-large-grid--fit sl-l-large-grid--center sl-l-large-grid--gutters'> <div class=sl-l-grid__column> <p>Sass &copy; 2006&ndash;2020 <a href="https://github.com/hcatlin">Hampton Catlin</a>, <a href="https://twitter.com/nex3">Natalie Weizenbaum</a>, <a href="http://chriseppstein.github.io/">Chris Eppstein</a>, <a href="https://www.sushiandrobots.com">Jina Anne</a>, and numerous contributors. It is available for use and modification under the <a href="https://github.com/sass/dart-sass/blob/master/LICENSE">MIT&nbsp;License</a>.</p> <nav class=sl-c-list-horizontal-wrapper> <ul> <li><a href="https://github.com/sass">Sass on GitHub</a></li> <li><a href="https://github.com/sass/sass-site">Website Source Code</a></li> <li><a href="/styleguide">Style Guide</a></li> <li><a href="/community-guidelines">Community Guidelines</a></li> </ul> </nav> </div> <div class='sl-l-grid__column sl-l-large-grid__column--auto-size sl-l-large-grid--justify-right'> <a class=twitter-follow-button data-show-count=false data-size=large href='https://twitter.com/SassCSS'> Follow @SassCSS </a> <script>
  !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');
</script> </div> </div> </div> </footer> <script src="https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.js"></script> <script>
  docsearch({
    apiKey: 'a409ff5d6a2476083c1a8dd1f8c04ec5',
    indexName: 'sass-lang',
    inputSelector: 'input.search',
    transformData: function(hits) {
      var domain = window.location.origin + "/";
      hits.forEach(function(hit) {
        if (!hit.url.startsWith(domain)) {
          hit.url = hit.url.replace(/^https?:\/\/[^\/]+\//, domain);
        }
      });
      return hits;
    },
    debug: false
  });
</script> <script src="/assets/js/sass-184dcd58.js"></script> </body> </html>